import { TrackerManager } from './TrackerManager';
import { StreamPartManager } from './StreamPartManager';
import { NodeToNode } from '../../protocol/NodeToNode';
import { Node, NodeId } from './Node';
import { PublishStreamConnectionRequest, PublishStreamConnectionResponse, StreamPartID, UnsubscribeRequest } from 'streamr-client-protocol';
export interface ProxyStreamConnectionManagerOptions {
    trackerManager: TrackerManager;
    streamPartManager: StreamPartManager;
    nodeToNode: NodeToNode;
    node: Node;
    nodeConnectTimeout: number;
    acceptProxyConnections: boolean;
}
export declare class ProxyStreamConnectionManager {
    private readonly trackerManager;
    private readonly streamPartManager;
    private readonly nodeToNode;
    private readonly node;
    private readonly nodeConnectTimeout;
    private readonly acceptProxyConnections;
    private readonly connections;
    constructor(opts: ProxyStreamConnectionManagerOptions);
    private addConnection;
    private removeConnection;
    private hasConnection;
    private getConnection;
    openOutgoingStreamConnection(streamPartId: StreamPartID, targetNodeId: string): Promise<void>;
    private connectAndNegotiate;
    closeOutgoingStreamConnection(streamPartId: StreamPartID, targetNodeId: NodeId): Promise<void>;
    processLeaveRequest(message: UnsubscribeRequest, nodeId: NodeId): void;
    processPublishStreamRequest(message: PublishStreamConnectionRequest, nodeId: string): Promise<void>;
    processPublishStreamResponse(message: PublishStreamConnectionResponse, nodeId: string): void;
    reconnect(targetNodeId: NodeId, streamPartId: StreamPartID): Promise<void>;
    stop(): void;
}
