/// <reference types="node" />
import { EventEmitter } from 'events';
import { ControlLayer, MessageLayer, StreamPartID } from 'streamr-client-protocol';
import { IWebRtcEndpoint } from '../connection/IWebRtcEndpoint';
import { PeerInfo } from '../connection/PeerInfo';
import { Rtts } from "../identifiers";
import { NodeId } from '../logic/node/Node';
export declare enum Event {
    NODE_CONNECTED = "streamr:node-node:node-connected",
    NODE_DISCONNECTED = "streamr:node-node:node-disconnected",
    DATA_RECEIVED = "streamr:node-node:stream-data",
    LOW_BACK_PRESSURE = "streamr:node-node:low-back-pressure",
    HIGH_BACK_PRESSURE = "streamr:node-node:high-back-pressure",
    PUBLISH_STREAM_REQUEST_RECEIVED = "node-node:publish-only-stream-request-received",
    PUBLISH_STREAM_RESPONSE_RECEIVED = "node-node:publish-only-stream-response-received",
    LEAVE_REQUEST_RECEIVED = "node-node:leave-request-received"
}
export interface NodeToNode {
    on(event: Event.NODE_CONNECTED, listener: (nodeId: NodeId) => void): this;
    on(event: Event.NODE_DISCONNECTED, listener: (nodeId: NodeId) => void): this;
    on(event: Event.DATA_RECEIVED, listener: (message: ControlLayer.BroadcastMessage, nodeId: NodeId) => void): this;
    on(event: Event.LOW_BACK_PRESSURE, listener: (nodeId: NodeId) => void): this;
    on(event: Event.HIGH_BACK_PRESSURE, listener: (nodeId: NodeId) => void): this;
    on(event: Event.PUBLISH_STREAM_REQUEST_RECEIVED, listener: (message: ControlLayer.PublishStreamConnectionRequest, nodeId: NodeId) => void): this;
    on(event: Event.PUBLISH_STREAM_RESPONSE_RECEIVED, listener: (message: ControlLayer.PublishStreamConnectionResponse, nodeId: NodeId) => void): this;
    on(event: Event.LEAVE_REQUEST_RECEIVED, listener: (message: ControlLayer.UnsubscribeRequest, nodeId: NodeId) => void): this;
}
export declare class NodeToNode extends EventEmitter {
    private readonly endpoint;
    private readonly logger;
    constructor(endpoint: IWebRtcEndpoint);
    connectToNode(receiverNodeId: NodeId, trackerAddress: string, trackerInstructed?: boolean): Promise<NodeId>;
    sendData(receiverNodeId: NodeId, streamMessage: MessageLayer.StreamMessage): Promise<ControlLayer.BroadcastMessage>;
    send<T>(receiverNodeId: NodeId, message: T & ControlLayer.ControlMessage): Promise<T>;
    disconnectFromNode(receiverNodeId: NodeId, reason: string): void;
    /**
     * @deprecated
     */
    getAddress(): string;
    stop(): void;
    onPeerConnected(peerInfo: PeerInfo): void;
    onPeerDisconnected(peerInfo: PeerInfo): void;
    onMessageReceived(peerInfo: PeerInfo, rawMessage: string): void;
    onLowBackPressure(peerInfo: PeerInfo): void;
    onHighBackPressure(peerInfo: PeerInfo): void;
    getRtts(): Readonly<Rtts>;
    getNegotiatedProtocolVersionsOnNode(nodeId: NodeId): [number, number];
    requestPublishOnlyStreamConnection(nodeId: NodeId, streamPartId: StreamPartID): Promise<void>;
    leaveStreamOnNode(nodeId: NodeId, streamPartId: StreamPartID): Promise<void>;
    respondToPublishOnlyStreamConnectionRequest(nodeId: NodeId, streamPartId: StreamPartID, accepted: boolean): Promise<void>;
    getAllConnectionNodeIds(): NodeId[];
}
