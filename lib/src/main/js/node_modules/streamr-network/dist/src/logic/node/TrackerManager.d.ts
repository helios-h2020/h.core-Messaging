import { StreamPartID } from 'streamr-client-protocol';
import { Location, Rtts, TrackerInfo } from '../../identifiers';
import { TrackerId } from '../tracker/Tracker';
import { NodeToTracker } from '../../protocol/NodeToTracker';
import { StreamPartManager } from './StreamPartManager';
import { NodeId } from './Node';
import { Metrics } from '../../helpers/MetricsContext';
interface NodeDescriptor {
    started: string;
    location?: Location;
    extra: Record<string, unknown>;
    rtts: Readonly<Rtts> | null;
}
interface Subscriber {
    subscribeToStreamPartIfHaveNotYet: (streamPartId: StreamPartID, sendStatus?: boolean) => void;
    subscribeToStreamPartOnNodes: (nodeIds: NodeId[], streamPartId: StreamPartID, trackerId: TrackerId, reattempt: boolean) => Promise<PromiseSettledResult<NodeId>[]>;
    unsubscribeFromStreamPartOnNode: (node: NodeId, streamPartId: StreamPartID, sendStatus?: boolean) => void;
}
declare type GetNodeDescriptor = (includeRtt: boolean) => NodeDescriptor;
export interface TrackerManagerOptions {
    trackers: Array<TrackerInfo>;
    rttUpdateTimeout?: number;
    trackerConnectionMaintenanceInterval?: number;
    instructionRetryInterval?: number;
}
export declare class TrackerManager {
    private readonly rttUpdateTimeoutsOnTrackers;
    private readonly trackerRegistry;
    private readonly trackerConnector;
    private readonly nodeToTracker;
    private readonly streamPartManager;
    private readonly rttUpdateInterval;
    private readonly instructionThrottler;
    private readonly instructionRetryManager;
    private readonly metrics;
    private readonly getNodeDescriptor;
    private readonly subscriber;
    constructor(nodeToTracker: NodeToTracker, opts: TrackerManagerOptions, streamPartManager: StreamPartManager, metrics: Metrics, getNodeDescriptor: GetNodeDescriptor, subscriber: Subscriber);
    sendStreamPartStatus(streamPartId: StreamPartID): void;
    onNewStreamPart(streamPartId: StreamPartID): void;
    connectToSignallingOnlyTracker(trackerId: TrackerId, trackerAddress: string): Promise<void>;
    disconnectFromSignallingOnlyTracker(trackerId: string): void;
    onUnsubscribeFromStreamPart(streamPartId: StreamPartID): void;
    start(): void;
    stop(): Promise<void>;
    private getStreamPartsForTracker;
    private shouldIncludeRttInfo;
    private sendStatus;
    private handleTrackerInstruction;
    getTrackerId(streamPartId: StreamPartID): TrackerId;
    getTrackerAddress(streamPartId: StreamPartID): TrackerId;
}
export {};
