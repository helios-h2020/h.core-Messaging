import { SmartContractRecord, StreamID, TrackerLayer } from 'streamr-client-protocol';
import { NodeId } from './logic/node/Node';
import { MetricsContext } from './helpers/MetricsContext';
export interface Rtts {
    [key: string]: number;
}
export interface Location {
    latitude?: number;
    longitude?: number;
    country?: string;
    city?: string;
}
export interface StreamPartStatus {
    id: StreamID;
    partition: number;
    neighbors: NodeId[];
    counter: number;
}
export interface Status {
    streamPart: StreamPartStatus;
    rtts: Rtts | null;
    location?: Location;
    started: string;
    version?: string;
    extra: Record<string, unknown>;
}
export declare enum RtcSubTypes {
    ICE_CANDIDATE = "iceCandidate",
    RTC_OFFER = "rtcOffer",
    RTC_ANSWER = "rtcAnswer",
    RTC_CONNECT = "rtcConnect"
}
export declare type RtcIceCandidateMessage = {
    subType: RtcSubTypes.ICE_CANDIDATE;
    data: {
        connectionId: string;
        candidate: string;
        mid: string;
    };
};
export declare type RtcConnectMessage = {
    subType: RtcSubTypes.RTC_CONNECT;
    data: {
        force: boolean;
    };
};
export declare type RtcOfferMessage = {
    subType: RtcSubTypes.RTC_OFFER;
    data: {
        connectionId: string;
        description: string;
    };
};
export declare type RtcAnswerMessage = {
    subType: RtcSubTypes.RTC_ANSWER;
    data: {
        connectionId: string;
        description: string;
    };
};
export declare type RelayMessage = (RtcOfferMessage | RtcAnswerMessage | RtcIceCandidateMessage | RtcConnectMessage) & TrackerLayer.RelayMessage;
export interface RtcErrorMessage {
    targetNode: NodeId;
    errorCode: string;
}
export declare type TrackerInfo = SmartContractRecord;
export interface AbstractNodeOptions {
    id?: NodeId;
    name?: string;
    location?: Location;
    metricsContext?: MetricsContext;
    trackerPingInterval?: number;
}
