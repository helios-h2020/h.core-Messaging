import { StreamMessage, StreamPartID } from 'streamr-client-protocol';
import { Node, NodeId, NodeOptions } from './Node';
export declare class NetworkNode extends Node {
    constructor(opts: NodeOptions);
    setExtraMetadata(metadata: Record<string, unknown>): void;
    publish(streamMessage: StreamMessage): void;
    joinStreamPartAsPurePublisher(streamPartId: StreamPartID, contactNodeId: string): Promise<void>;
    leavePurePublishingStreamPart(streamPartId: StreamPartID, contactNodeId: string): Promise<void>;
    addMessageListener<T>(cb: (msg: StreamMessage<T>) => void): void;
    removeMessageListener<T>(cb: (msg: StreamMessage<T>) => void): void;
    subscribe(streamPartId: StreamPartID): void;
    unsubscribe(streamPartId: StreamPartID): void;
    getNeighborsForStreamPart(streamPartId: StreamPartID): ReadonlyArray<NodeId>;
    getRtt(nodeId: NodeId): number | undefined;
}
