"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = exports.LoggerNode = void 0;
const pino_pretty_1 = __importDefault(require("pino-pretty"));
const LoggerCommon_1 = require("./LoggerCommon");
const parseBoolean = (value) => {
    switch (value) {
        case 'true':
            return true;
        case 'false':
            return false;
        case undefined:
            return undefined;
        default:
            throw new Error('Invalid boolean value: ${value}');
    }
};
class LoggerNode extends LoggerCommon_1.LoggerCommon {
    constructor(module, context, destinationStream) {
        var _a;
        const options = {
            name: LoggerNode.createName(module, context),
            enabled: !process.env.NOLOG,
            level: process.env.LOG_LEVEL || 'info',
            // explicitly pass prettifier, otherwise pino may try to lazy require it,
            // which can fail when under jest+typescript, due to some CJS/ESM
            // incompatibility leading to throwing an error like:
            // "prettyFactory is not a function"
            prettifier: process.env.NODE_ENV === 'production' ? undefined : pino_pretty_1.default,
            prettyPrint: process.env.NODE_ENV === 'production' ? false : {
                colorize: (_a = parseBoolean(process.env.LOG_COLORS)) !== null && _a !== void 0 ? _a : true,
                translateTime: 'yyyy-mm-dd"T"HH:MM:ss.l',
                ignore: 'pid,hostname',
                levelFirst: true,
            }
        };
        super(options, destinationStream);
    }
}
exports.LoggerNode = LoggerNode;
exports.Logger = LoggerNode;
//# sourceMappingURL=LoggerNode.js.map