"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createNetworkNode = void 0;
const uuid_1 = require("uuid");
const MetricsContext_1 = require("./helpers/MetricsContext");
const NodeToTracker_1 = require("./protocol/NodeToTracker");
const NodeToNode_1 = require("./protocol/NodeToNode");
const RtcSignaller_1 = require("./logic/node/RtcSignaller");
const NetworkNode_1 = require("./logic/node/NetworkNode");
const NegotiatedProtocolVersions_1 = require("./connection/NegotiatedProtocolVersions");
const PeerInfo_1 = require("./connection/PeerInfo");
const NodeClientWsEndpoint_1 = __importDefault(require("./connection/ws/NodeClientWsEndpoint"));
const WebRtcEndpoint_1 = require("./connection/WebRtcEndpoint");
const NodeWebRtcConnection_1 = __importDefault(require("./connection/NodeWebRtcConnection"));
const createNetworkNode = ({ id = (0, uuid_1.v4)(), name, location, trackers, metricsContext = new MetricsContext_1.MetricsContext(id), peerPingInterval, trackerPingInterval, disconnectionWaitTime, newWebrtcConnectionTimeout, rttUpdateTimeout, webrtcDatachannelBufferThresholdLow, webrtcDatachannelBufferThresholdHigh, stunUrls = ['stun:stun.streamr.network:5349'], trackerConnectionMaintenanceInterval, webrtcDisallowPrivateAddresses = false, acceptProxyConnections }) => {
    const peerInfo = PeerInfo_1.PeerInfo.newNode(id, name, undefined, undefined, location);
    const endpoint = new NodeClientWsEndpoint_1.default(peerInfo, metricsContext, trackerPingInterval);
    const nodeToTracker = new NodeToTracker_1.NodeToTracker(endpoint);
    const webRtcSignaller = new RtcSignaller_1.RtcSignaller(peerInfo, nodeToTracker);
    const negotiatedProtocolVersions = new NegotiatedProtocolVersions_1.NegotiatedProtocolVersions(peerInfo);
    const nodeToNode = new NodeToNode_1.NodeToNode(new WebRtcEndpoint_1.WebRtcEndpoint(peerInfo, stunUrls, webRtcSignaller, metricsContext, negotiatedProtocolVersions, NodeWebRtcConnection_1.default, newWebrtcConnectionTimeout, peerPingInterval, webrtcDatachannelBufferThresholdLow, webrtcDatachannelBufferThresholdHigh, webrtcDisallowPrivateAddresses));
    return new NetworkNode_1.NetworkNode({
        peerInfo,
        trackers,
        protocols: {
            nodeToTracker,
            nodeToNode
        },
        metricsContext,
        disconnectionWaitTime,
        rttUpdateTimeout,
        trackerConnectionMaintenanceInterval,
        acceptProxyConnections
    });
};
exports.createNetworkNode = createNetworkNode;
//# sourceMappingURL=createNetworkNode.js.map