"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoggerCommon = void 0;
const pino_1 = __importDefault(require("pino"));
const path_1 = __importDefault(require("path"));
const lodash_1 = __importDefault(require("lodash"));
class LoggerCommon {
    constructor(options, destinationStream) {
        this.logger = (destinationStream !== undefined) ? (0, pino_1.default)(options, destinationStream) : (0, pino_1.default)(options);
    }
    static createName(module, context) {
        const parsedPath = path_1.default.parse(String(module.id));
        let fileId = parsedPath.name;
        if (fileId === 'index') {
            // file with name "foobar/index.ts" -> "foobar"
            const parts = parsedPath.dir.split(path_1.default.sep);
            fileId = parts[parts.length - 1];
        }
        const appId = process.env.STREAMR_APPLICATION_ID;
        const longName = lodash_1.default.without([appId, fileId, context], undefined).join(':');
        return lodash_1.default.padEnd(longName.substring(0, this.NAME_LENGTH), this.NAME_LENGTH, ' ');
    }
    fatal(msg, ...args) {
        this.logger.fatal(msg, ...args);
    }
    error(msg, ...args) {
        const errorInstance = args.find((arg) => (arg.constructor.name === 'Error'
            || arg.constructor.name === 'AggregateError'
            || arg.constructor.name === 'EvalError'
            || arg.constructor.name === 'RangeError'
            || arg.constructor.name === 'ReferenceError'
            || arg.constructor.name === 'SyntaxError'
            || arg.constructor.name === 'TypeError'
            || arg.constructor.name === 'URIError'));
        if (errorInstance !== undefined) {
            this.logger.error({ err: errorInstance }, msg, ...args);
        }
        else {
            this.logger.error(msg, ...args);
        }
    }
    warn(msg, ...args) {
        this.logger.warn(msg, ...args);
    }
    info(msg, ...args) {
        this.logger.info(msg, ...args);
    }
    debug(msg, ...args) {
        this.logger.debug(msg, ...args);
    }
    trace(msg, ...args) {
        this.logger.trace(msg, ...args);
    }
    getFinalLogger() {
        const finalLogger = pino_1.default.final(this.logger);
        return {
            error: (error, origin) => finalLogger.error(error, origin)
        };
    }
}
exports.LoggerCommon = LoggerCommon;
LoggerCommon.NAME_LENGTH = 20;
//# sourceMappingURL=LoggerCommon.js.map