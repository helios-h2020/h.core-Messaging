"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Session token caching and async init.
 */
const tsyringe_1 = require("tsyringe");
const eventemitter3_1 = __importDefault(require("eventemitter3"));
const LoginEndpoints_1 = require("./LoginEndpoints");
const Config_1 = require("./Config");
const Container_1 = require("./Container");
const log_1 = require("./utils/log");
const debug = (0, log_1.Debug)('Session');
var State;
(function (State) {
    State["LOGGING_OUT"] = "logging out";
    State["LOGGED_OUT"] = "logged out";
    State["LOGGING_IN"] = "logging in";
    State["LOGGED_IN"] = "logged in";
})(State || (State = {}));
let Session = class Session extends eventemitter3_1.default {
    constructor(container, options) {
        super();
        this.container = container;
        this.options = options;
        this.state = State.LOGGED_OUT;
        this.options = options;
        if (!this.options.sessionToken) {
            this.options.unauthenticated = true;
        }
    }
    isUnauthenticated() {
        return !this.options.privateKey && !this.options.ethereum && !this.options.sessionToken;
    }
    updateState(newState) {
        debug('updateState %s -> %s', this.state, newState);
        this.state = newState;
        this.emit(newState);
    }
    get loginEndpoints() {
        return this.container.resolve(LoginEndpoints_1.LoginEndpoints);
    }
    async sendLogin() {
        const auth = this.options;
        debug('sendLogin()');
        if (typeof auth.privateKey !== 'undefined' || typeof auth.ethereum !== 'undefined') {
            debug('sendLogin challenge');
            return this.loginEndpoints.loginWithChallengeResponse();
        }
        throw new Error('Need either "privateKey", "ethereum" or "sessionToken" to login.');
    }
    async getSessionToken(requireNewToken = false) {
        // @ts-expect-error
        if (typeof this.options.apiKey !== 'undefined') {
            throw new Error('apiKey auth no longer supported');
        }
        // @ts-expect-error
        if (typeof this.options.username !== 'undefined') {
            throw new Error('username/password auth no longer supported');
        }
        if (this.options.sessionToken && !requireNewToken) {
            return this.options.sessionToken;
        }
        if (!this.options.privateKey && !this.options.ethereum && !this.options.sessionToken) {
            return '';
        }
        if (this.state !== State.LOGGING_IN) {
            if (this.state === State.LOGGING_OUT) {
                this.sessionTokenPromise = new Promise((resolve) => {
                    this.once(State.LOGGED_OUT, () => resolve(this.getSessionToken(requireNewToken)));
                });
            }
            else {
                this.updateState(State.LOGGING_IN);
                this.sessionTokenPromise = this.sendLogin().then((tokenObj) => {
                    this.options.sessionToken = tokenObj.token;
                    this.updateState(State.LOGGED_IN);
                    return tokenObj.token;
                }, (err) => {
                    this.updateState(State.LOGGED_OUT);
                    throw err;
                });
            }
        }
        return this.sessionTokenPromise;
    }
    async logout() {
        if (this.state === State.LOGGED_OUT) {
            throw new Error('Already logged out!');
        }
        if (this.state === State.LOGGING_OUT) {
            throw new Error('Already logging out!');
        }
        if (this.state === State.LOGGING_IN) {
            await new Promise((resolve) => {
                this.once(State.LOGGED_IN, () => resolve(this.logout()));
            });
            return;
        }
        try {
            this.updateState(State.LOGGING_OUT);
            const t = this.loginEndpoints.logoutEndpoint();
            this.options.sessionToken = undefined;
            this.sessionTokenPromise = undefined;
            await t;
        }
        finally {
            this.updateState(State.LOGGED_OUT);
        }
    }
};
Session = __decorate([
    (0, tsyringe_1.scoped)(tsyringe_1.Lifecycle.ContainerScoped),
    __param(0, (0, tsyringe_1.inject)(Container_1.BrubeckContainer)),
    __param(1, (0, tsyringe_1.inject)(Config_1.Config.Auth)),
    __metadata("design:paramtypes", [Object, Object])
], Session);
exports.default = Session;
//# sourceMappingURL=Session.js.map