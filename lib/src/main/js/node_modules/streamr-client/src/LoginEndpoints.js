"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoginEndpoints = void 0;
/**
 * Login Endpoints Wrapper.
 */
const tsyringe_1 = require("tsyringe");
const Ethereum_1 = __importDefault(require("./Ethereum"));
const utils_1 = require("./utils");
const Context_1 = require("./utils/Context");
const Config_1 = require("./Config");
const Rest_1 = require("./Rest");
const authFetch_1 = require("./authFetch");
let LoginEndpoints = class LoginEndpoints {
    constructor(context, ethereum, rest, authConfig) {
        this.ethereum = ethereum;
        this.rest = rest;
        this.authConfig = authConfig;
        this.id = (0, utils_1.instanceId)(this);
        this.debug = context.debug.extend(this.id);
    }
    /** @internal */
    async getChallenge(address) {
        this.debug('getChallenge %o', {
            address,
        });
        return this.rest.post(['login', 'challenge', address], undefined, { useSession: false });
    }
    /** @internal */
    async sendChallengeResponse(challenge, signature, address) {
        const props = {
            challenge,
            signature,
            address,
        };
        this.debug('sendChallengeResponse %o', props);
        return this.rest.post(['login', 'response'], props, { useSession: false });
    }
    /** @internal */
    async loginWithChallengeResponse() {
        const address = await this.ethereum.getAddress();
        this.debug('loginWithChallengeResponse');
        const challenge = await this.getChallenge(address);
        const signature = await this.ethereum.getSigner().signMessage(challenge.challenge);
        return this.sendChallengeResponse(challenge, signature, address);
    }
    /** @internal */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars, class-methods-use-this
    async loginWithApiKey(_apiKey) {
        const message = 'apiKey auth is no longer supported. Please create an ethereum identity.';
        throw new authFetch_1.AuthFetchError(message);
    }
    /** @internal */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars, class-methods-use-this
    async loginWithUsernamePassword(_username, _password) {
        const message = 'username/password auth is no longer supported. Please create an ethereum identity.';
        throw new authFetch_1.AuthFetchError(message);
    }
    async getUserInfo() {
        this.debug('getUserInfo');
        return this.rest.get(['users', 'me']);
    }
    /** @internal */
    async logoutEndpoint() {
        this.debug('logoutEndpoint');
        await this.rest.post(['logout']);
    }
};
LoginEndpoints = __decorate([
    (0, tsyringe_1.scoped)(tsyringe_1.Lifecycle.ContainerScoped),
    __param(2, (0, tsyringe_1.inject)((0, tsyringe_1.delay)(() => Rest_1.Rest))),
    __param(3, (0, tsyringe_1.inject)(Config_1.Config.Auth)),
    __metadata("design:paramtypes", [Context_1.Context,
        Ethereum_1.default,
        Rest_1.Rest, Object])
], LoginEndpoints);
exports.LoginEndpoints = LoginEndpoints;
//# sourceMappingURL=LoginEndpoints.js.map