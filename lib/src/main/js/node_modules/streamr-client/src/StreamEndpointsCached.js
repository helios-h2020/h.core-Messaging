"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamEndpointsCached = void 0;
const tsyringe_1 = require("tsyringe");
const utils_1 = require("./utils");
const Context_1 = require("./utils/Context");
const Config_1 = require("./Config");
const StreamRegistry_1 = require("./StreamRegistry");
const permission_1 = require("./permission");
const SEPARATOR = '|'; // always use SEPARATOR for cache key
let StreamEndpointsCached = class StreamEndpointsCached {
    constructor(context, streamRegistry, cacheOptions) {
        this.streamRegistry = streamRegistry;
        this.cacheOptions = cacheOptions;
        this.id = (0, utils_1.instanceId)(this);
        this.getStream = (0, utils_1.CacheAsyncFn)(this.getStreamPreloaded.bind(this), {
            ...this.cacheOptions,
            cacheKey: ([streamId]) => {
                // see clearStream
                return `${streamId}${SEPARATOR}`;
            }
        });
        this.getStreamValidationInfo = (0, utils_1.CacheAsyncFn)(this.getStreamValidationInfoPreloaded.bind(this), {
            ...this.cacheOptions,
            cacheKey: ([streamId]) => {
                return `${streamId}${SEPARATOR}`;
            }
        });
        this.isStreamPublisher = (0, utils_1.CacheAsyncFn)(this.isStreamPublisherPreloaded.bind(this), {
            ...this.cacheOptions,
            cacheKey([streamId, ethAddress]) {
                return [streamId, ethAddress.toLowerCase()].join(SEPARATOR);
            }
        });
        this.isStreamSubscriber = (0, utils_1.CacheAsyncFn)(this.isStreamSubscriberPreloaded.bind(this), {
            ...this.cacheOptions,
            cacheKey([streamId, ethAddress]) {
                return [streamId, ethAddress.toLowerCase()].join(SEPARATOR);
            }
        });
        this.isPublic = (0, utils_1.CacheAsyncFn)(this.isPublicSubscriptionStream.bind(this), {
            ...this.cacheOptions,
            cacheKey([streamId]) {
                return ['PublicSubscribe', streamId].join(SEPARATOR);
            }
        });
        this.debug = context.debug.extend(this.id);
    }
    async getStreamPreloaded(streamId) {
        return this.streamRegistry.getStream(streamId);
    }
    async getStreamValidationInfoPreloaded(streamId) {
        return this.streamRegistry.getStream(streamId);
    }
    async isStreamPublisherPreloaded(streamId, ethAddress) {
        return this.streamRegistry.isStreamPublisher(streamId, ethAddress);
    }
    async isStreamSubscriberPreloaded(streamId, ethAddress) {
        return this.streamRegistry.isStreamSubscriber(streamId, ethAddress);
    }
    async isPublicSubscriptionStream(streamId) {
        return this.streamRegistry.hasPermission({
            streamId,
            public: true,
            permission: permission_1.StreamPermission.SUBSCRIBE
        });
    }
    /**
     * Clear cache for streamId
     */
    clearStream(streamId) {
        this.debug('clearStream', streamId);
        // include separator so startsWith(streamid) doesn't match streamid-something
        const target = `${streamId}${SEPARATOR}`;
        const matchTarget = (s) => s.startsWith(target);
        this.getStream.clearMatching(matchTarget);
        this.getStreamValidationInfo.clearMatching(matchTarget);
        this.isStreamPublisher.clearMatching(matchTarget);
        this.isStreamSubscriber.clearMatching(matchTarget);
    }
    /**
     * Clear all cached data
     */
    clear() {
        this.debug('clear');
        this.getStream.clear();
        this.getStreamValidationInfo.clear();
        this.isStreamPublisher.clear();
        this.isStreamSubscriber.clear();
    }
};
StreamEndpointsCached = __decorate([
    (0, tsyringe_1.scoped)(tsyringe_1.Lifecycle.ContainerScoped),
    __param(1, (0, tsyringe_1.inject)((0, tsyringe_1.delay)(() => StreamRegistry_1.StreamRegistry))),
    __param(2, (0, tsyringe_1.inject)(Config_1.Config.Cache)),
    __metadata("design:paramtypes", [Context_1.Context,
        StreamRegistry_1.StreamRegistry, Object])
], StreamEndpointsCached);
exports.StreamEndpointsCached = StreamEndpointsCached;
//# sourceMappingURL=StreamEndpointsCached.js.map