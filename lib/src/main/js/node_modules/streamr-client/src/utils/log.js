"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.format = exports.formatWithOptions = exports.inspect = exports.Debug = exports.DEFAULT_INSPECT_OPTS = void 0;
/**
 * Exposes customised Debug and inspect functions.
 */
const util_1 = __importDefault(require("util"));
const debug_1 = __importDefault(require("debug"));
// add global support for pretty millisecond formatting with %n
debug_1.default.formatters.n = (v) => {
    if (v == null || Number.isNaN(v)) {
        return String(v);
    }
    return debug_1.default.humanize(v);
};
exports.DEFAULT_INSPECT_OPTS = {
    maxStringLength: 256
};
// override default formatters for node
if (typeof window === 'undefined') {
    // monkeypatch default log function to use current `inspectOpts`.  This
    // ensures values logged without placeholders e.g. %o, %O will have the
    // same inspect options applied. Without this only values with a
    // placeholder will use the `inspectOpts` config.
    // e.g.
    // `debug('msg', obj)` should use same `inspectOpts` as `debug('msg %O', msg)`
    debug_1.default.log = function log(...args) {
        // @ts-expect-error inspectOpts/useColors not in debug types
        if (this.inspectOpts.colors === undefined) {
            // @ts-expect-error inspectOpts/useColors not in debug types
            this.inspectOpts.colors = this.useColors; // need this to get colours when no placeholder
        }
        return process.stderr.write(formatWithOptions({
            // @ts-expect-error inspectOpts not in debug types
            ...this.inspectOpts,
        }, ...args) + '\n');
    };
    // mutate inspectOpts rather than replace, otherwise changes are lost
    // @ts-expect-error inspectOpts not in debug types
    Object.assign(debug_1.default.inspectOpts, {
        ...exports.DEFAULT_INSPECT_OPTS,
    });
}
const streamrDebug = (0, debug_1.default)('Streamr');
const StreamrDebug = Object.assign(streamrDebug.extend.bind(streamrDebug), {
    enable: debug_1.default.enable.bind(debug_1.default),
    disable: debug_1.default.disable.bind(debug_1.default),
    humanize: debug_1.default.humanize.bind(debug_1.default),
});
exports.Debug = StreamrDebug;
function inspect(value, inspectOptions = {}) {
    return util_1.default.inspect(value, {
        ...exports.DEFAULT_INSPECT_OPTS,
        ...inspectOptions,
    });
}
exports.inspect = inspect;
function formatWithOptions(inspectOptions, msgFormat, ...param) {
    if (typeof util_1.default.formatWithOptions !== 'function') {
        // util.formatWithOptions is not browserified, use util.format instead
        return util_1.default.format(msgFormat, ...param);
    }
    return util_1.default.formatWithOptions({
        ...exports.DEFAULT_INSPECT_OPTS,
        ...inspectOptions,
    }, msgFormat, ...param);
}
exports.formatWithOptions = formatWithOptions;
function format(msgFormat, ...param) {
    return formatWithOptions(exports.DEFAULT_INSPECT_OPTS, msgFormat, ...param);
}
exports.format = format;
//# sourceMappingURL=log.js.map