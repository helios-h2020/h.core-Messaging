"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyExchangeStream = exports.parseGroupKeys = void 0;
const streamr_client_protocol_1 = require("streamr-client-protocol");
const tsyringe_1 = require("tsyringe");
const utils_1 = require("../utils");
const Context_1 = require("../utils/Context");
const DestroySignal_1 = require("../DestroySignal");
const Subscriber_1 = __importDefault(require("../subscribe/Subscriber"));
const Publisher_1 = __importDefault(require("../publish/Publisher"));
const Ethereum_1 = __importDefault(require("../Ethereum"));
const Encryption_1 = require("./Encryption");
function parseGroupKeys(groupKeys = {}) {
    return new Map(Object.entries(groupKeys || {}).map(([key, value]) => {
        if (!value || !key) {
            return null;
        }
        return [key, Encryption_1.GroupKey.from(value)];
    }).filter(Boolean));
}
exports.parseGroupKeys = parseGroupKeys;
function waitForSubMessage(sub, matchFn) {
    const task = (0, utils_1.Defer)();
    const onMessage = (streamMessage) => {
        try {
            if (matchFn(streamMessage.getContent(), streamMessage)) {
                task.resolve(streamMessage);
            }
        }
        catch (err) {
            task.reject(err);
        }
    };
    task.finally(async () => {
        await sub.unsubscribe();
    }).catch(() => { }); // important: prevent unchained finally cleanup causing unhandled rejection
    sub.consume(onMessage).catch((err) => task.reject(err));
    sub.onError(task.reject);
    return task;
}
const { GROUP_KEY_RESPONSE, GROUP_KEY_ERROR_RESPONSE } = streamr_client_protocol_1.StreamMessage.MESSAGE_TYPES;
let KeyExchangeStream = class KeyExchangeStream {
    constructor(context, ethereum, subscriber, destroySignal, publisher) {
        this.ethereum = ethereum;
        this.subscriber = subscriber;
        this.destroySignal = destroySignal;
        this.publisher = publisher;
        this.isStopped = false;
        this.id = (0, utils_1.instanceId)(this);
        this.debug = context.debug.extend(this.id);
        this.subscribe = (0, utils_1.pOnce)(this.createSubscription.bind(this));
    }
    async createSubscription() {
        // subscribing to own keyexchange stream
        const publisherId = await this.ethereum.getAddress();
        const streamId = streamr_client_protocol_1.StreamIDUtils.formKeyExchangeStreamID(publisherId);
        const sub = await this.subscriber.subscribe(streamId);
        const onDestroy = () => {
            return sub.unsubscribe();
        };
        this.destroySignal.onDestroy.listen(onDestroy);
        sub.onBeforeFinally(() => {
            this.destroySignal.onDestroy.unlisten(onDestroy);
            this.subscribe.reset();
        });
        return sub;
    }
    stop() {
        this.isStopped = true;
    }
    async request(publisherId, request) {
        if (this.isStopped) {
            return undefined;
        }
        const streamId = streamr_client_protocol_1.StreamIDUtils.formKeyExchangeStreamID(publisherId);
        let responseTask;
        const onDestroy = () => {
            if (responseTask) {
                responseTask.resolve(undefined);
            }
        };
        this.destroySignal.onDestroy.listen(onDestroy);
        let sub;
        try {
            sub = await this.createSubscription();
            if (this.isStopped || !sub) {
                return undefined;
            }
            responseTask = waitForSubMessage(sub, (content, streamMessage) => {
                const { messageType } = streamMessage;
                if (messageType !== GROUP_KEY_RESPONSE && messageType !== GROUP_KEY_ERROR_RESPONSE) {
                    return false;
                }
                return streamr_client_protocol_1.GroupKeyResponse.fromArray(content).requestId === request.requestId;
            });
            if (this.isStopped) {
                return undefined;
            }
            await this.publisher.publish(streamId, request);
            if (this.isStopped) {
                responseTask.resolve(undefined);
                return undefined;
            }
            return await responseTask;
        }
        catch (err) {
            if (responseTask) {
                responseTask.reject(err);
            }
            throw err;
        }
        finally {
            this.destroySignal.onDestroy.unlisten(onDestroy);
            this.subscribe.reset();
            if (sub) {
                await sub.unsubscribe();
            }
            await responseTask;
        }
    }
    async response(subscriberId, response) {
        if (this.isStopped) {
            return undefined;
        }
        // hack overriding toStreamMessage method to set correct encryption type
        const toStreamMessage = response.toStreamMessage.bind(response);
        response.toStreamMessage = (...args) => {
            const msg = toStreamMessage(...args);
            msg.encryptionType = streamr_client_protocol_1.StreamMessage.ENCRYPTION_TYPES.RSA;
            return msg;
        };
        return this.publisher.publish(streamr_client_protocol_1.StreamIDUtils.formKeyExchangeStreamID(subscriberId), response);
    }
};
KeyExchangeStream = __decorate([
    (0, tsyringe_1.scoped)(tsyringe_1.Lifecycle.ContainerScoped),
    __param(4, (0, tsyringe_1.inject)((0, tsyringe_1.delay)(() => Publisher_1.default))),
    __metadata("design:paramtypes", [Context_1.Context,
        Ethereum_1.default,
        Subscriber_1.default,
        DestroySignal_1.DestroySignal,
        Publisher_1.default])
], KeyExchangeStream);
exports.KeyExchangeStream = KeyExchangeStream;
//# sourceMappingURL=KeyExchangeUtils.js.map