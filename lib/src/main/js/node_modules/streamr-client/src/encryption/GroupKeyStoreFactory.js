"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const tsyringe_1 = require("tsyringe");
const utils_1 = require("../utils");
const log_1 = require("../utils/log");
const Context_1 = require("../utils/Context");
const Config_1 = require("../Config");
const Ethereum_1 = __importDefault(require("../Ethereum"));
const KeyExchangeUtils_1 = require("./KeyExchangeUtils");
const GroupKeyStore_1 = __importDefault(require("./GroupKeyStore"));
let GroupKeyStoreFactory = class GroupKeyStoreFactory {
    constructor(context, ethereum, cacheConfig, encryptionConfig) {
        this.ethereum = ethereum;
        this.cleanupFns = [];
        this.id = (0, utils_1.instanceId)(this);
        this.debug = context.debug.extend(this.id);
        this.getStore = (0, utils_1.CacheAsyncFn)(this.getNewStore.bind(this), {
            ...cacheConfig,
            cacheKey([streamId]) {
                return streamId;
            }
        });
        this.initialGroupKeys = encryptionConfig.groupKeys;
    }
    async getNewStore(streamId) {
        if (!streamId || typeof streamId !== 'string') {
            throw new Context_1.ContextError(this, `invalid streamId for store: ${(0, log_1.inspect)(streamId)}`);
        }
        const clientId = await this.ethereum.getAddress();
        const store = new GroupKeyStore_1.default({
            context: this,
            clientId,
            streamId,
            groupKeys: [...(0, KeyExchangeUtils_1.parseGroupKeys)(this.initialGroupKeys[streamId]).entries()]
        });
        this.cleanupFns.push(async () => {
            try {
                await store.close();
            }
            catch (_err) {
                // whatever
            }
        });
        return store;
    }
    async useGroupKey(streamId) {
        const store = await this.getStore(streamId);
        return store.useGroupKey();
    }
    async rotateGroupKey(streamId) {
        const store = await this.getStore(streamId);
        return store.rotateGroupKey();
    }
    async setNextGroupKey(streamId, newKey) {
        const store = await this.getStore(streamId);
        return store.setNextGroupKey(newKey);
    }
    async rekey(streamId) {
        const store = await this.getStore(streamId);
        return store.rekey();
    }
    async stop() {
        this.getStore.clear();
        const { cleanupFns } = this;
        this.cleanupFns = [];
        await Promise.allSettled(cleanupFns);
    }
};
GroupKeyStoreFactory = __decorate([
    (0, tsyringe_1.scoped)(tsyringe_1.Lifecycle.ContainerScoped),
    __param(2, (0, tsyringe_1.inject)(Config_1.Config.Cache)),
    __param(3, (0, tsyringe_1.inject)(Config_1.Config.Encryption)),
    __metadata("design:paramtypes", [Context_1.Context,
        Ethereum_1.default, Object, Object])
], GroupKeyStoreFactory);
exports.default = GroupKeyStoreFactory;
//# sourceMappingURL=GroupKeyStoreFactory.js.map