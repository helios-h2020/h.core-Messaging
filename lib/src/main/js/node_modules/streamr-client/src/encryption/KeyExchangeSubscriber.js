"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubscriberKeyExchange = void 0;
const streamr_client_protocol_1 = require("streamr-client-protocol");
const utils_1 = require("../utils");
const Subscriber_1 = __importDefault(require("../subscribe/Subscriber"));
const KeyExchangeUtils_1 = require("./KeyExchangeUtils");
const Encryption_1 = __importStar(require("./Encryption"));
const GroupKeyStoreFactory_1 = __importDefault(require("./GroupKeyStoreFactory"));
const tsyringe_1 = require("tsyringe");
async function getGroupKeysFromStreamMessage(streamMessage, encryptionUtil) {
    let encryptedGroupKeys = [];
    if (streamr_client_protocol_1.GroupKeyResponse.is(streamMessage)) {
        encryptedGroupKeys = streamr_client_protocol_1.GroupKeyResponse.fromArray(streamMessage.getParsedContent() || []).encryptedGroupKeys || [];
    }
    else if (streamr_client_protocol_1.GroupKeyAnnounce.is(streamMessage)) {
        const msg = streamr_client_protocol_1.GroupKeyAnnounce.fromArray(streamMessage.getParsedContent() || []);
        encryptedGroupKeys = msg.encryptedGroupKeys || [];
    }
    const tasks = encryptedGroupKeys.map(async (encryptedGroupKey) => (new Encryption_1.GroupKey(encryptedGroupKey.groupKeyId, await encryptionUtil.decryptWithPrivateKey(encryptedGroupKey.encryptedGroupKeyHex, true))));
    await Promise.allSettled(tasks);
    return Promise.all(tasks);
}
let SubscriberKeyExchange = class SubscriberKeyExchange {
    constructor(subscriber, keyExchangeStream, groupKeyStoreFactory) {
        this.subscriber = subscriber;
        this.keyExchangeStream = keyExchangeStream;
        this.groupKeyStoreFactory = groupKeyStoreFactory;
        this.isStopped = false;
        this.id = (0, utils_1.instanceId)(this);
        this.debug = this.subscriber.debug.extend(this.id);
        this.encryptionUtil = new Encryption_1.default();
    }
    async requestKeys({ streamId, publisherId, groupKeyIds }) {
        if (this.isStopped) {
            return [];
        }
        const requestId = (0, utils_1.uuid)('GroupKeyRequest');
        const rsaPublicKey = this.encryptionUtil.getPublicKey();
        const msg = new streamr_client_protocol_1.GroupKeyRequest({
            streamId,
            requestId,
            rsaPublicKey,
            groupKeyIds,
        });
        const response = await this.keyExchangeStream.request(publisherId, msg);
        return response ? getGroupKeysFromStreamMessage(response, this.encryptionUtil) : [];
    }
    stop() {
        this.isStopped = true;
    }
    async getGroupKeyStore(streamId) {
        return this.groupKeyStoreFactory.getStore(streamId);
    }
    async getKey(streamMessage) {
        if (this.isStopped) {
            return undefined;
        }
        const streamId = streamMessage.getStreamId();
        const publisherId = streamMessage.getPublisherId();
        const { groupKeyId } = streamMessage;
        if (!groupKeyId) {
            return undefined;
        }
        const groupKeyStore = await this.getGroupKeyStore(streamId);
        if (this.isStopped) {
            return undefined;
        }
        const existingGroupKey = await groupKeyStore.get(groupKeyId);
        if (this.isStopped) {
            return undefined;
        }
        if (existingGroupKey) {
            return existingGroupKey;
        }
        const receivedGroupKeys = await this.requestKeys({
            streamId,
            publisherId,
            groupKeyIds: [groupKeyId],
        });
        if (this.isStopped) {
            return undefined;
        }
        await Promise.all(receivedGroupKeys.map(async (groupKey) => (groupKeyStore.add(groupKey))));
        if (this.isStopped) {
            return undefined;
        }
        return receivedGroupKeys.find((groupKey) => groupKey.id === groupKeyId);
    }
    async getGroupKey(streamMessage) {
        if (this.isStopped) {
            return undefined;
        }
        if (!streamMessage.groupKeyId) {
            return undefined;
        }
        await this.encryptionUtil.onReady();
        if (this.isStopped) {
            return undefined;
        }
        return this.getKey(streamMessage);
    }
    async addNewKey(streamMessage) {
        if (this.isStopped) {
            return;
        }
        if (!streamMessage.newGroupKey) {
            return;
        }
        const streamId = streamMessage.getStreamId();
        const groupKeyStore = await this.getGroupKeyStore(streamId);
        if (this.isStopped) {
            return;
        }
        // newGroupKey has been converted into GroupKey
        const groupKey = streamMessage.newGroupKey;
        await groupKeyStore.add(groupKey);
    }
};
SubscriberKeyExchange = __decorate([
    (0, tsyringe_1.scoped)(tsyringe_1.Lifecycle.ContainerScoped),
    __metadata("design:paramtypes", [Subscriber_1.default,
        KeyExchangeUtils_1.KeyExchangeStream,
        GroupKeyStoreFactory_1.default])
], SubscriberKeyExchange);
exports.SubscriberKeyExchange = SubscriberKeyExchange;
//# sourceMappingURL=KeyExchangeSubscriber.js.map