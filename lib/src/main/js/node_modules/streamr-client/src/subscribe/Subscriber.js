"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const tsyringe_1 = require("tsyringe");
const utils_1 = require("../utils");
const Context_1 = require("../utils/Context");
const SubscriptionSession_1 = __importDefault(require("./SubscriptionSession"));
const Subscription_1 = require("./Subscription");
const Container_1 = require("../Container");
const StreamIDBuilder_1 = require("../StreamIDBuilder");
/**
 * Public Subscribe APIs
 */
let Subscriber = class Subscriber {
    constructor(context, streamIdBuilder, container) {
        this.streamIdBuilder = streamIdBuilder;
        this.container = container;
        this.subSessions = new Map();
        this.unsubscribeAll = this.removeAll.bind(this);
        this.id = (0, utils_1.instanceId)(this);
        this.debug = context.debug.extend(this.id);
    }
    async subscribe(streamDefinition, onMessage) {
        const streamPartId = await this.streamIdBuilder.toStreamPartID(streamDefinition);
        return this.subscribeTo(streamPartId, onMessage);
    }
    async subscribeTo(streamPartId, onMessage) {
        const sub = await this.add(streamPartId);
        if (onMessage) {
            sub.useLegacyOnMessageHandler(onMessage);
        }
        return sub;
    }
    /** @internal */
    getOrCreateSubscriptionSession(streamPartId) {
        if (this.subSessions.has(streamPartId)) {
            return this.getSubscriptionSession(streamPartId);
        }
        this.debug('creating new SubscriptionSession: %s', streamPartId);
        const subSession = new SubscriptionSession_1.default(this, streamPartId, this.container);
        this.subSessions.set(streamPartId, subSession);
        subSession.onRetired(() => {
            this.subSessions.delete(streamPartId);
        });
        return subSession;
    }
    /** @internal */
    async addSubscription(sub) {
        const subSession = this.getOrCreateSubscriptionSession(sub.streamPartId);
        // add subscription to subSession
        try {
            await subSession.add(sub);
        }
        catch (err) {
            this.debug('failed to add', sub.id, err);
            // clean up if fail
            await this.remove(sub);
            throw err;
        }
        return sub;
    }
    async add(streamPartId) {
        const subSession = this.getOrCreateSubscriptionSession(streamPartId);
        // create subscription
        const sub = new Subscription_1.Subscription(subSession);
        return this.addSubscription(sub);
    }
    async remove(sub) {
        if (!sub) {
            return;
        }
        const subSession = this.subSessions.get(sub.streamPartId);
        if (!subSession) {
            return;
        }
        await subSession.remove(sub);
    }
    async unsubscribe(streamDefinitionOrSubscription) {
        if (streamDefinitionOrSubscription instanceof Subscription_1.Subscription) {
            return this.remove(streamDefinitionOrSubscription);
        }
        return this.removeAll(streamDefinitionOrSubscription);
    }
    /**
     * Remove all subscriptions, optionally only those matching options.
     */
    async removeAll(streamDefinition) {
        const subs = !streamDefinition
            ? this.getAllSubscriptions()
            : await this.getSubscriptions(streamDefinition);
        return (0, utils_1.allSettledValues)(subs.map((sub) => (this.remove(sub))));
    }
    /**
     * Count all subscriptions.
     */
    countAll() {
        let count = 0;
        this.subSessions.forEach((s) => {
            count += s.count();
        });
        return count;
    }
    /**
     * Count all matching subscriptions.
     */
    // TODO rename this to something more specific?
    async count(streamDefinition) {
        if (streamDefinition === undefined) {
            return this.countAll();
        }
        return (await this.getSubscriptions(streamDefinition)).length;
    }
    /**
     * Get all subscriptions.
     */
    getAllSubscriptions() {
        return [...this.subSessions.values()].reduce((o, s) => {
            o.push(...s.subscriptions);
            return o;
        }, []);
    }
    /**
     * Get subscription session for matching sub options.
     * @internal
     */
    getSubscriptionSession(streamPartId) {
        const subSession = this.subSessions.get(streamPartId);
        if (!subSession) {
            return undefined;
        }
        return subSession;
    }
    countSubscriptionSessions() {
        return this.subSessions.size;
    }
    /**
     * Get subscriptions matching streamId or streamId + streamPartition
     */
    async getSubscriptions(streamDefinition) {
        if (!streamDefinition) {
            return this.getAllSubscriptions();
        }
        const results = [];
        await Promise.all([...this.subSessions.values()].map(async (subSession) => {
            const isMatch = await this.streamIdBuilder.match(streamDefinition, subSession.streamPartId);
            if (isMatch) {
                results.push(subSession);
            }
        }));
        return results.flatMap((subSession) => ([
            ...subSession.subscriptions
        ]));
    }
    async stop() {
        await this.removeAll();
    }
};
Subscriber = __decorate([
    (0, tsyringe_1.scoped)(tsyringe_1.Lifecycle.ContainerScoped),
    __param(1, (0, tsyringe_1.inject)(StreamIDBuilder_1.StreamIDBuilder)),
    __param(2, (0, tsyringe_1.inject)(Container_1.BrubeckContainer)),
    __metadata("design:paramtypes", [Context_1.Context,
        StreamIDBuilder_1.StreamIDBuilder, Object])
], Subscriber);
exports.default = Subscriber;
//# sourceMappingURL=Subscriber.js.map