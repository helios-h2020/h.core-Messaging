"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Decrypt = void 0;
/**
 * Decrypt StreamMessages in-place.
 */
const streamr_client_protocol_1 = require("streamr-client-protocol");
const Encryption_1 = __importStar(require("../encryption/Encryption"));
const utils_1 = require("../utils");
class Decrypt {
    constructor(context, streamEndpoints, keyExchange, destroySignal) {
        this.streamEndpoints = streamEndpoints;
        this.keyExchange = keyExchange;
        this.destroySignal = destroySignal;
        this.isStopped = false;
        this.id = (0, utils_1.instanceId)(this);
        this.debug = context.debug.extend(this.id);
        this.decrypt = this.decrypt.bind(this);
        this.destroySignal.onDestroy(async () => {
            if (!this.isStopped) {
                await this.stop();
            }
        });
    }
    async decrypt(streamMessage) {
        if (this.isStopped) {
            return;
        }
        if (!streamMessage.groupKeyId) {
            return;
        }
        if (streamMessage.encryptionType !== streamr_client_protocol_1.StreamMessage.ENCRYPTION_TYPES.AES) {
            return;
        }
        try {
            const groupKey = await this.keyExchange.getGroupKey(streamMessage).catch((err) => {
                throw new Encryption_1.UnableToDecryptError(`Could not get GroupKey: ${streamMessage.groupKeyId} â€“ ${err.stack}`, streamMessage);
            });
            if (!groupKey) {
                throw new Encryption_1.UnableToDecryptError([
                    `Could not get GroupKey: ${streamMessage.groupKeyId}`,
                    'Publisher is offline, key does not exist or no permission to access key.',
                ].join(' '), streamMessage);
            }
            if (this.isStopped) {
                return;
            }
            Encryption_1.default.decryptStreamMessage(streamMessage, groupKey);
            await this.keyExchange.addNewKey(streamMessage);
        }
        catch (err) {
            if (this.isStopped) {
                return;
            }
            this.debug('Decrypt Error', err);
            // clear cached permissions if cannot decrypt, likely permissions need updating
            this.streamEndpoints.clearStream(streamMessage.getStreamId());
            throw err;
        }
    }
    async stop() {
        this.debug('stop');
        this.isStopped = true;
    }
}
exports.Decrypt = Decrypt;
//# sourceMappingURL=Decrypt.js.map