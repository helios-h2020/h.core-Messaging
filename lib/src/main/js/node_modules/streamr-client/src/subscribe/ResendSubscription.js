"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResendSubscription = void 0;
const Subscription_1 = require("./Subscription");
const streamr_client_protocol_1 = require("streamr-client-protocol");
const Config_1 = require("../Config");
const OrderMessages_1 = __importDefault(require("./OrderMessages"));
const Resends_1 = __importDefault(require("./Resends"));
const Signal_1 = __importDefault(require("../utils/Signal"));
class ResendSubscription extends Subscription_1.Subscription {
    // @internal
    constructor(subSession, resends, resendOptions, container) {
        super(subSession);
        this.resends = resends;
        this.resendOptions = resendOptions;
        this.onResentSignal = Signal_1.default.once();
        this.onResent = this.onResentSignal;
        this.resendThenRealtime = this.resendThenRealtime.bind(this);
        this.orderMessages = new OrderMessages_1.default(container.resolve(Config_1.Config.Subscribe), this, container.resolve(Resends_1.default), subSession.streamPartId);
        this.pipe(this.resendThenRealtime);
        this.pipe(this.orderMessages.transform());
        this.onBeforeFinally(async () => {
            this.orderMessages.stop();
        });
    }
    async getResent() {
        const [id, partition] = streamr_client_protocol_1.StreamPartIDUtils.getStreamIDAndPartition(this.streamPartId);
        const resentMsgs = await this.resends.resend({
            id,
            partition,
        }, this.resendOptions);
        this.onBeforeFinally(async () => {
            resentMsgs.end();
            await resentMsgs.return();
        });
        return resentMsgs;
    }
    // @internal
    async *resendThenRealtime(src) {
        try {
            yield* await this.getResent();
        }
        catch (err) {
            if (err.code !== 'NO_STORAGE_NODES') {
                // ignore NO_STORAGE_NODES errors
                await this.handleError(err);
            }
        }
        await this.onResentSignal.trigger();
        yield* src;
    }
}
exports.ResendSubscription = ResendSubscription;
//# sourceMappingURL=ResendSubscription.js.map