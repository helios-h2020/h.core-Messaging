"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SignatureRequiredError = void 0;
/**
 * Validation Wrapper
 */
const tsyringe_1 = require("tsyringe");
const streamr_client_protocol_1 = require("streamr-client-protocol");
const utils_1 = require("./utils");
const Context_1 = require("./utils/Context");
const StreamEndpointsCached_1 = require("./StreamEndpointsCached");
const Config_1 = require("./Config");
class SignatureRequiredError extends streamr_client_protocol_1.StreamMessageError {
    constructor(streamMessage, code) {
        super('Client requires data to be signed.', streamMessage, code);
    }
}
exports.SignatureRequiredError = SignatureRequiredError;
/**
 * Wrap StreamMessageValidator in a way that ensures it can validate in parallel but
 * validation is guaranteed to resolve in the same order they were called
 * Handles caching remote calls
 */
let Validator = class Validator extends streamr_client_protocol_1.StreamMessageValidator {
    constructor(context, streamEndpoints, options, cacheOptions) {
        super({
            getStream: (streamId) => {
                return streamEndpoints.getStream(streamId);
            },
            isPublisher: (publisherId, streamId) => {
                return streamEndpoints.isStreamPublisher(streamId, publisherId);
            },
            isSubscriber: (ethAddress, streamId) => {
                return streamEndpoints.isStreamSubscriber(streamId, ethAddress);
            },
            verify: (address, payload, signature) => {
                return this.cachedVerify(address, payload, signature);
            }
        });
        this.options = options;
        this.cacheOptions = cacheOptions;
        this.isStopped = false;
        this.cachedVerify = (0, utils_1.CacheAsyncFn)(async (address, payload, signature) => {
            if (this.isStopped) {
                return true;
            }
            return streamr_client_protocol_1.SigningUtil.verify(address, payload, signature);
        }, {
            // forcibly use small cache otherwise keeps n serialized messages in memory
            ...this.cacheOptions,
            maxSize: 100,
            cachePromiseRejection: true,
            cacheKey: (args) => args.join('|'),
        });
        this.orderedValidate = (0, utils_1.pOrderedResolve)(async (msg) => {
            if (this.isStopped) {
                return;
            }
            const { options } = this;
            // Check special cases controlled by the verifySignatures policy
            if (options.verifySignatures === 'never' && msg.messageType === streamr_client_protocol_1.StreamMessage.MESSAGE_TYPES.MESSAGE) {
                return; // no validation required
            }
            if (options.verifySignatures === 'always' && !msg.signature) {
                throw new SignatureRequiredError(msg);
            }
            // In all other cases validate using the validator
            // will throw with appropriate validation failure
            await this.doValidation(msg).catch((err) => {
                if (this.isStopped) {
                    return;
                }
                if (!err.streamMessage) {
                    err.streamMessage = msg; // eslint-disable-line no-param-reassign
                }
                throw err;
            });
        });
        this.id = (0, utils_1.instanceId)(this);
        this.debug = context.debug.extend(this.id);
        this.doValidation = super.validate.bind(this);
    }
    async validate(msg) {
        if (this.isStopped) {
            return;
        }
        await this.orderedValidate(msg);
    }
    stop() {
        this.isStopped = true;
        this.cachedVerify.clear();
        this.orderedValidate.clear();
    }
};
Validator = __decorate([
    (0, tsyringe_1.scoped)(tsyringe_1.Lifecycle.ContainerScoped),
    __param(2, (0, tsyringe_1.inject)(Config_1.Config.Subscribe)),
    __param(3, (0, tsyringe_1.inject)(Config_1.Config.Cache)),
    __metadata("design:paramtypes", [Context_1.Context,
        StreamEndpointsCached_1.StreamEndpointsCached, Object, Object])
], Validator);
exports.default = Validator;
//# sourceMappingURL=Validator.js.map