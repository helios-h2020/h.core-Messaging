"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Wrap a network node.
 */
const tsyringe_1 = require("tsyringe");
const streamr_network_1 = require("streamr-network");
const utils_1 = require("./utils");
const Context_1 = require("./utils/Context");
const Config_1 = require("./Config");
const DestroySignal_1 = require("./DestroySignal");
const Ethereum_1 = __importDefault(require("./Ethereum"));
/**
 * Wrap a network node.
 * Lazily creates & starts node on first call to getNode().
 */
let BrubeckNode = class BrubeckNode {
    constructor(context, destroySignal, ethereum, options) {
        this.destroySignal = destroySignal;
        this.ethereum = ethereum;
        this.startNodeCalled = false;
        this.startNodeComplete = false;
        /**
         * Stop network node, or wait for it to stop if already stopping.
         * Subsequent calls to getNode/start will fail.
         */
        this.destroy = (0, utils_1.pOnce)(async () => {
            this.debug('destroy >>');
            const node = this.cachedNode;
            this.cachedNode = undefined;
            // stop node only if started or in progress
            if (node && this.startNodeCalled) {
                this.debug('stopping node >>');
                if (!this.startNodeComplete) {
                    // wait for start to finish before stopping node
                    const startNodeTask = this.startNodeTask();
                    this.startNodeTask.reset(); // allow subsequent calls to fail
                    await startNodeTask;
                }
                await node.stop();
                this.debug('stopping node <<');
            }
            this.startNodeTask.reset(); // allow subsequent calls to fail
            this.debug('destroy <<');
        });
        /**
         * Start network node, or wait for it to start if already started.
         */
        this.startNodeTask = (0, utils_1.pOnce)(async () => {
            this.startNodeCalled = true;
            this.debug('start >>');
            try {
                const node = await this.initNode();
                if (!this.destroySignal.isDestroyed()) {
                    await node.start();
                }
                if (this.destroySignal.isDestroyed()) {
                    this.debug('stopping node before init >>');
                    await node.stop();
                    this.debug('stopping node before init <<');
                }
                this.assertNotDestroyed();
                return node;
            }
            finally {
                this.startNodeComplete = true;
                this.debug('start <<');
            }
        });
        this.startNode = this.startNodeTask;
        /**
         * Get started network node.
         */
        this.getNode = this.startNodeTask;
        this.options = options;
        this.id = (0, utils_1.instanceId)(this);
        this.debug = context.debug.extend(this.id);
        destroySignal.onDestroy(this.destroy);
    }
    assertNotDestroyed() {
        this.destroySignal.assertNotDestroyed(this);
    }
    async initNode() {
        var _a;
        this.assertNotDestroyed();
        if (this.cachedNode) {
            return this.cachedNode;
        }
        const { options } = this;
        let { id } = options;
        // generate id if none supplied
        if (id == null || id === '') {
            id = await this.generateId();
        }
        else if (!this.ethereum.isAuthenticated()) {
            throw new Error(`cannot set explicit nodeId ${id} without authentication`);
        }
        else {
            const ethereumAddress = await this.ethereum.getAddress();
            if (!id.toLowerCase().startsWith(ethereumAddress.toLowerCase())) {
                throw new Error(`given node id ${id} not compatible with authenticated wallet ${ethereumAddress}`);
            }
        }
        this.debug('initNode', id);
        const node = (0, streamr_network_1.createNetworkNode)({
            disconnectionWaitTime: 200,
            name: id,
            ...options,
            id,
            metricsContext: new streamr_network_1.MetricsContext((_a = options.name) !== null && _a !== void 0 ? _a : id)
        });
        if (!this.destroySignal.isDestroyed()) {
            this.cachedNode = node;
        }
        return node;
    }
    async generateId() {
        if (this.ethereum.isAuthenticated()) {
            const address = await this.ethereum.getAddress();
            return `${address}#${(0, utils_1.uuid)()}`;
            // eslint-disable-next-line no-else-return
        }
        else {
            return Ethereum_1.default.generateEthereumAccount().address;
        }
    }
    async getNodeId() {
        const node = await this.getNode();
        return node.getNodeId();
    }
    /**
     * Calls publish on node after starting it.
     * Basically a wrapper around: (await getNode()).publish(â€¦)
     * but will be sync in case that node is already started.
     * Zalgo intentional. See below.
     */
    publishToNode(streamMessage) {
        // NOTE: function is intentionally not async for performance reasons.
        // Will call cachedNode.publish immediately if cachedNode is set.
        // Otherwise will wait for node to start.
        this.debug('publishToNode >> %o', streamMessage.getMessageID());
        try {
            this.destroySignal.assertNotDestroyed(this);
            if (!this.cachedNode || !this.startNodeComplete) {
                // use .then instead of async/await so
                // this.cachedNode.publish call can be sync
                return this.startNodeTask().then((node) => {
                    return node.publish(streamMessage);
                });
            }
            return this.cachedNode.publish(streamMessage);
        }
        finally {
            this.debug('publishToNode << %o', streamMessage.getMessageID());
        }
    }
    async openPublishProxyConnectionOnStreamPart(streamPartId, nodeId) {
        try {
            if (!this.cachedNode || !this.startNodeComplete) {
                await this.startNodeTask();
            }
            await this.cachedNode.joinStreamPartAsPurePublisher(streamPartId, nodeId);
        }
        finally {
            this.debug('openProxyConnectionOnStream << %o', streamPartId, nodeId);
        }
    }
    async closePublishProxyConnectionOnStreamPart(streamPartId, nodeId) {
        try {
            if (!this.cachedNode || !this.startNodeComplete) {
                return;
            }
            await this.cachedNode.leavePurePublishingStreamPart(streamPartId, nodeId);
        }
        finally {
            this.debug('closeProxyConnectionOnStream << %o', streamPartId, nodeId);
        }
    }
};
BrubeckNode = __decorate([
    (0, tsyringe_1.scoped)(tsyringe_1.Lifecycle.ContainerScoped),
    __param(3, (0, tsyringe_1.inject)(Config_1.Config.Network)),
    __metadata("design:paramtypes", [Context_1.Context,
        DestroySignal_1.DestroySignal,
        Ethereum_1.default, Object])
], BrubeckNode);
exports.default = BrubeckNode;
//# sourceMappingURL=BrubeckNode.js.map