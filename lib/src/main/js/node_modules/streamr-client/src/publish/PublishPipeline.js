"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FailedToPublishError = void 0;
const tsyringe_1 = require("tsyringe");
const log_1 = require("../utils/log");
const utils_1 = require("../utils");
const Context_1 = require("../utils/Context");
const Pipeline_1 = require("../utils/Pipeline");
const MessageCreator_1 = __importDefault(require("./MessageCreator"));
const BrubeckNode_1 = __importDefault(require("../BrubeckNode"));
const Signer_1 = __importDefault(require("./Signer"));
const Encrypt_1 = __importDefault(require("./Encrypt"));
const Validator_1 = __importDefault(require("../Validator"));
const DestroySignal_1 = require("../DestroySignal");
const StreamIDBuilder_1 = require("../StreamIDBuilder");
class FailedToPublishError extends Error {
    constructor(publishMetadata, reason) {
        // eslint-disable-next-line max-len
        super(`Failed to publish to stream ${(0, StreamIDBuilder_1.formStreamDefinitionDescription)(publishMetadata.streamDefinition)} due to: ${reason && reason.stack ? reason.stack : reason}.`);
        this.publishMetadata = publishMetadata;
        this.reason = reason;
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, this.constructor);
        }
    }
    [Symbol.for('nodejs.util.inspect.custom')](depth, options) {
        return (0, log_1.inspect)(this, {
            ...options,
            customInspect: false,
            depth,
        });
    }
}
exports.FailedToPublishError = FailedToPublishError;
let PublishPipeline = class PublishPipeline {
    constructor(context, node, messageCreator, signer, validator, destroySignal, streamIdBuilder, encryption) {
        this.node = node;
        this.messageCreator = messageCreator;
        this.signer = signer;
        this.validator = validator;
        this.destroySignal = destroySignal;
        this.streamIdBuilder = streamIdBuilder;
        this.encryption = encryption;
        this.isStarted = false;
        this.isStopped = false;
        this.inProgress = new Set();
        this.filterResolved = ([_streamMessage, defer]) => {
            if (this.isStopped && !defer.isResolved()) {
                defer.reject(new Context_1.ContextError(this, 'Pipeline Stopped. Client probably disconnected'));
                return false;
            }
            return !defer.isResolved();
        };
        this.id = (0, utils_1.instanceId)(this);
        this.debug = context.debug.extend(this.id);
        this.streamMessageQueue = new Pipeline_1.PushPipeline()
            .pipe(this.toStreamMessage.bind(this))
            .filter(this.filterResolved);
        this.publishQueue = new Pipeline_1.Pipeline(this.streamMessageQueue)
            .forEach(this.encryptMessage.bind(this))
            .filter(this.filterResolved)
            .forEach(this.signMessage.bind(this))
            .filter(this.filterResolved)
            .forEach(this.validateMessage.bind(this))
            .filter(this.filterResolved)
            .forEach(this.consumeQueue.bind(this));
        destroySignal.onDestroy(this.stop.bind(this));
    }
    async *toStreamMessage(src) {
        var _a;
        for await (const [publishMetadata, defer] of src) {
            const { streamDefinition, ...options } = publishMetadata;
            try {
                const [streamId, partition] = await this.streamIdBuilder.toStreamPartElements(streamDefinition);
                if ((partition !== undefined) && (options.partitionKey !== undefined)) {
                    throw new Error('Invalid combination of "partition" and "partitionKey"');
                }
                (_a = options.partitionKey) !== null && _a !== void 0 ? _a : (options.partitionKey = partition);
                const streamMessage = await this.messageCreator.create(streamId, options);
                yield [streamMessage, defer];
            }
            catch (err) {
                defer.reject(err);
                continue;
            }
        }
    }
    async encryptMessage([streamMessage, defer]) {
        const onError = (err) => {
            defer.reject(err);
        };
        await this.encryption.encrypt(streamMessage).catch(onError);
    }
    async signMessage([streamMessage, defer]) {
        if (defer.isResolved()) {
            return;
        }
        const onError = (err) => {
            defer.reject(err);
        };
        await this.signer.sign(streamMessage).catch(onError);
    }
    async validateMessage([streamMessage, defer]) {
        if (defer.isResolved()) {
            return;
        }
        const onError = (err) => {
            defer.reject(err);
        };
        await this.validator.validate(streamMessage).catch(onError);
    }
    async consumeQueue([streamMessage, defer]) {
        if (defer.isResolved()) {
            return;
        }
        try {
            this.check();
            await this.node.publishToNode(streamMessage);
        }
        catch (err) {
            defer.reject(err);
        }
        defer.resolve(streamMessage);
    }
    /**
     * Starts queue if not already started.
     */
    startQueue() {
        if (this.isStarted || this.isStopped) {
            return;
        }
        this.isStarted = true;
        this.publishQueue.consume().catch(this.debug.bind(this.debug));
    }
    check() {
        this.destroySignal.assertNotDestroyed(this);
        if (this.isStopped) {
            throw new Context_1.ContextError(this, 'Pipeline Stopped. Client probably disconnected');
        }
    }
    /**
     * Put publish metadata into queue to be published.
     * Creates a Defer to be resolved when message gets sent to node.
     */
    async publish(publishMetadata) {
        // TODO the logged object contains a huge streamDefiniton if a Stream object is
        // used -> truncate to minimal e.g. with streamDefinitionToString?
        this.debug('publish >> %o', publishMetadata);
        this.startQueue();
        const defer = (0, utils_1.Defer)();
        try {
            this.inProgress.add(defer);
            this.check();
            await this.streamMessageQueue.push([publishMetadata, defer]);
            return await defer;
        }
        catch (err) {
            const error = new FailedToPublishError(publishMetadata, err);
            defer.reject(error);
            throw error;
        }
        finally {
            this.inProgress.delete(defer);
            this.debug('publish <<');
        }
    }
    start() {
        this.isStopped = false;
    }
    async stop() {
        this.debug('stop >>');
        try {
            this.isStopped = true;
            const inProgress = new Set(this.inProgress);
            this.inProgress.clear();
            inProgress.forEach((defer) => {
                defer.reject(new Context_1.ContextError(this, 'Pipeline Stopped. Client probably disconnected'));
            });
            this.publishQueue.return();
            this.streamMessageQueue.return();
            await Promise.allSettled([
                this.encryption.stop(),
                this.messageCreator.stop(),
            ]);
        }
        finally {
            this.debug('stop <<');
        }
    }
};
PublishPipeline = __decorate([
    (0, tsyringe_1.scoped)(tsyringe_1.Lifecycle.ContainerScoped),
    __param(7, (0, tsyringe_1.inject)((0, tsyringe_1.delay)(() => Encrypt_1.default))),
    __metadata("design:paramtypes", [Context_1.Context,
        BrubeckNode_1.default,
        MessageCreator_1.default,
        Signer_1.default,
        Validator_1.default,
        DestroySignal_1.DestroySignal,
        StreamIDBuilder_1.StreamIDBuilder,
        Encrypt_1.default])
], PublishPipeline);
exports.default = PublishPipeline;
//# sourceMappingURL=PublishPipeline.js.map