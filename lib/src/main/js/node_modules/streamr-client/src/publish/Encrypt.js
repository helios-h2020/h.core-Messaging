"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Encrypt StreamMessages in-place.
 */
const streamr_client_protocol_1 = require("streamr-client-protocol");
const KeyExchangePublisher_1 = require("../encryption/KeyExchangePublisher");
const StreamEndpointsCached_1 = require("../StreamEndpointsCached");
const tsyringe_1 = require("tsyringe");
const Encryption_1 = __importDefault(require("../encryption/Encryption"));
const Ethereum_1 = __importDefault(require("../Ethereum"));
let PublisherEncryption = class PublisherEncryption {
    constructor(streamEndpoints, keyExchange, ethereum) {
        this.streamEndpoints = streamEndpoints;
        this.keyExchange = keyExchange;
        this.ethereum = ethereum;
        this.isStopped = false;
    }
    async encrypt(streamMessage) {
        if (this.isStopped) {
            return;
        }
        if (streamr_client_protocol_1.StreamMessage.isEncrypted(streamMessage)) {
            // already encrypted
            return;
        }
        if (!this.ethereum.canEncrypt()) {
            return;
        }
        const { messageType } = streamMessage;
        if (messageType === streamr_client_protocol_1.StreamMessage.MESSAGE_TYPES.GROUP_KEY_RESPONSE
            || messageType === streamr_client_protocol_1.StreamMessage.MESSAGE_TYPES.GROUP_KEY_REQUEST
            || messageType === streamr_client_protocol_1.StreamMessage.MESSAGE_TYPES.GROUP_KEY_ERROR_RESPONSE) {
            // never encrypt
            return;
        }
        if (streamMessage.messageType !== streamr_client_protocol_1.StreamMessage.MESSAGE_TYPES.MESSAGE) {
            return;
        }
        const streamId = streamMessage.getStreamId();
        const isPublic = await this.streamEndpoints.isPublic(streamId);
        if (isPublic || this.isStopped) {
            return;
        }
        const stream = await this.streamEndpoints.getStream(streamId);
        if (!(await (this.keyExchange.hasAnyGroupKey(stream.id)))) {
            // not needed
            return;
        }
        const [groupKey, nextGroupKey] = await this.keyExchange.useGroupKey(stream.id);
        if (this.isStopped) {
            return;
        }
        if (!groupKey) {
            throw new Error(`Tried to use group key but no group key found for stream: ${stream.id}`);
        }
        Encryption_1.default.encryptStreamMessage(streamMessage, groupKey, nextGroupKey);
    }
    async start() {
        this.isStopped = false;
    }
    async stop() {
        this.isStopped = true;
    }
};
PublisherEncryption = __decorate([
    (0, tsyringe_1.scoped)(tsyringe_1.Lifecycle.ContainerScoped),
    __param(1, (0, tsyringe_1.inject)((0, tsyringe_1.delay)(() => KeyExchangePublisher_1.PublisherKeyExchange))),
    __metadata("design:paramtypes", [StreamEndpointsCached_1.StreamEndpointsCached,
        KeyExchangePublisher_1.PublisherKeyExchange,
        Ethereum_1.default])
], PublisherEncryption);
exports.default = PublisherEncryption;
//# sourceMappingURL=Encrypt.js.map