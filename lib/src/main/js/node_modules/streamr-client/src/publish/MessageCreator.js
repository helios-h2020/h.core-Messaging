"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamMessageCreatorAnonymous = void 0;
/**
 * Central place to fetch async dependencies and convert message metadata into StreamMessages.
 */
const tsyringe_1 = require("tsyringe");
const streamr_client_protocol_1 = require("streamr-client-protocol");
const utils_1 = require("../utils");
const MessageChain_1 = require("./MessageChain");
const Config_1 = require("../Config");
const Ethereum_1 = __importDefault(require("../Ethereum"));
const StreamPartitioner_1 = __importDefault(require("./StreamPartitioner"));
class StreamMessageCreatorAnonymous {
    // eslint-disable-next-line class-methods-use-this
    async create(_streamId, _options) {
        throw new Error('Anonymous user can not publish.');
    }
    // eslint-disable-next-line class-methods-use-this
    stop() { }
}
exports.StreamMessageCreatorAnonymous = StreamMessageCreatorAnonymous;
/**
 * Create StreamMessages from metadata.
 */
let StreamMessageCreator = class StreamMessageCreator {
    /*
     * Get function for creating stream messages.
     */
    constructor(streamPartitioner, ethereum, cacheOptions) {
        this.streamPartitioner = streamPartitioner;
        this.ethereum = ethereum;
        this.cacheOptions = cacheOptions;
        this.isStopped = false;
        this.getMsgChain = (0, MessageChain_1.getCachedMessageChain)(this.cacheOptions);
        // per-stream queue so messages processed in-order
        this.queue = (0, utils_1.LimitAsyncFnByKey)(1);
    }
    async create(streamId, { content, timestamp, partitionKey, msgChainId, ...opts }) {
        // streamId as queue key
        return this.queue(streamId, async () => {
            // load cached stream + publisher details
            const [streamPartition, publisherIdChecksumCase] = await Promise.all([
                this.streamPartitioner.compute(streamId, partitionKey),
                this.ethereum.getAddress(),
            ]);
            const streamPartId = (0, streamr_client_protocol_1.toStreamPartID)(streamId, streamPartition);
            const publisherId = publisherIdChecksumCase.toLowerCase();
            // chain messages
            const chain = this.getMsgChain(streamPartId, {
                publisherId, msgChainId
            });
            const [messageId, prevMsgRef] = chain.add(timestamp);
            const streamMessage = streamr_client_protocol_1.StreamMessage.isStreamMessageContainer(content)
                // TODO: typing for stream message containers
                // e.g. transparent handling for StreamMessage<SomeClass> where SomeClass implements toStreamMessage & {de}serialization methods
                ? (content.toStreamMessage(messageId, prevMsgRef || null))
                : new streamr_client_protocol_1.StreamMessage({
                    messageId,
                    prevMsgRef,
                    content,
                    ...opts
                });
            return streamMessage;
        });
    }
    async start() {
        this.isStopped = false;
    }
    async stop() {
        this.isStopped = true;
        this.streamPartitioner.clear();
        this.queue.clear();
        this.getMsgChain.clear();
    }
};
StreamMessageCreator = __decorate([
    (0, tsyringe_1.scoped)(tsyringe_1.Lifecycle.ContainerScoped),
    __param(2, (0, tsyringe_1.inject)(Config_1.Config.Cache)),
    __metadata("design:paramtypes", [StreamPartitioner_1.default,
        Ethereum_1.default, Object])
], StreamMessageCreator);
exports.default = StreamMessageCreator;
//# sourceMappingURL=MessageCreator.js.map