"use strict";
/**
 * @module StreamrClientConfig
 *
 * Old Client Config
 * New Brubeck Configuration in Config.ts.
 * TODO: Disolve ConfigBase.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateConfig = exports.STREAM_CLIENT_DEFAULTS = exports.STREAMR_STORAGE_NODE_GERMANY = void 0;
const cloneDeep_1 = __importDefault(require("lodash/cloneDeep"));
const ajv_1 = __importDefault(require("ajv"));
const ajv_formats_1 = __importDefault(require("ajv-formats"));
const config_schema_json_1 = __importDefault(require("./config.schema.json"));
exports.STREAMR_STORAGE_NODE_GERMANY = '0x31546eEA76F2B2b3C5cC06B1c93601dc35c9D916';
/**
 * @category Important
 */
exports.STREAM_CLIENT_DEFAULTS = {
    auth: {},
    // Streamr Core options
    restUrl: 'https://streamr.network/api/v2',
    theGraphUrl: 'https://api.thegraph.com/subgraphs/name/streamr-dev/streams',
    streamrNodeAddress: '0xf3E5A65851C3779f468c9EcB32E6f25D9D68601a',
    // storageNodeAddressDev = new StorageNode('0xde1112f631486CfC759A50196853011528bC5FA0', '')
    // P2P Streamr Network options
    autoConnect: true,
    autoDisconnect: true,
    orderMessages: true,
    retryResendAfter: 5000,
    gapFillTimeout: 5000,
    gapFill: true,
    maxGapRequests: 5,
    maxRetries: 5,
    // Encryption options
    verifySignatures: 'auto',
    groupKeys: {},
    // Ethereum and Data Union related options
    // For ethers.js provider params, see https://docs.ethers.io/ethers.js/v5-beta/api-providers.html#provider
    mainChainRPCs: undefined,
    dataUnionChainRPCs: {
        name: 'gnosis',
        chainId: 100,
        rpcs: [{
                url: 'https://rpc.xdaichain.com/',
                timeout: 120 * 1000
            }]
    },
    dataUnionBinanceWithdrawalChainRPCs: {
        name: 'binance',
        chainId: 56,
        rpcs: [{
                url: 'https://bsc-dataseed.binance.org/',
                timeout: 120 * 1000,
            }]
    },
    streamRegistryChainRPCs: {
        name: 'polygon',
        chainId: 137,
        rpcs: [{
                url: 'https://polygon-rpc.com',
                timeout: 120 * 1000
            }]
    },
    tokenAddress: '0x8f693ca8D21b157107184d29D398A8D082b38b76',
    tokenSidechainAddress: '0x256eb8a51f382650B2A1e946b8811953640ee47D',
    binanceAdapterAddress: '0x193888692673b5dD46e6BC90bA8cBFeDa515c8C1',
    binanceSmartChainAMBAddress: '0x05185872898b6f94aa600177ef41b9334b1fa48b',
    withdrawServerUrl: 'https://streamr.com:3000',
    streamRegistryChainAddress: '0x0D483E10612F327FC11965Fc82E90dC19b141641',
    streamStorageRegistryChainAddress: '0xe8e2660CeDf2a59C917a5ED05B72df4146b58399',
    storageNodeRegistryChainAddress: '0x080F34fec2bc33928999Ea9e39ADc798bEF3E0d6',
    ensCacheChainAddress: '0x870528c1aDe8f5eB4676AA2d15FC0B034E276A1A',
    dataUnion: {
        minimumWithdrawTokenWei: '1000000',
        payForTransport: true,
        factoryMainnetAddress: '0xE41439BF434F9CfBF0153f5231C205d4ae0C22e3',
        factorySidechainAddress: '0xFCE1FBFAaE61861B011B379442c8eE1DC868ABd0',
        templateMainnetAddress: '0x67352e3F7dBA907aF877020aE7E9450C0029C70c',
        templateSidechainAddress: '0xaCF9e8134047eDc671162D9404BF63a587435bAa',
    },
    ethereumNetworks: {
        polygon: {
            chainId: 137,
            gasPriceStrategy: (estimatedGasPrice) => estimatedGasPrice.add('10000000000'),
        }
    },
    cache: {
        maxSize: 10000,
        maxAge: 30 * 60 * 1000, // 30 minutes
    },
    _timeouts: {
        theGraph: {
            timeout: 60 * 1000,
            retryInterval: 1000
        },
        storageNode: {
            timeout: 30 * 1000,
            retryInterval: 1000
        },
        jsonRpc: {
            timeout: 30 * 1000,
            retryInterval: 1000
        },
        httpFetchTimeout: 30 * 1000
    }
};
/** @internal */
function ClientConfig(inputOptions = {}) {
    (0, exports.validateConfig)(inputOptions);
    const opts = (0, cloneDeep_1.default)(inputOptions);
    const defaults = (0, cloneDeep_1.default)(exports.STREAM_CLIENT_DEFAULTS);
    const options = {
        ...defaults,
        ...opts,
        dataUnion: {
            ...defaults.dataUnion,
            ...opts.dataUnion
        },
        cache: {
            ...defaults.cache,
            ...opts.cache,
        }
        // NOTE: sidechain and storageNode settings are not merged with the defaults
    };
    // Backwards compatibility for option 'authKey' => 'apiKey'
    // @ts-expect-error
    if (options.authKey && !options.apiKey) {
        // @ts-expect-error
        options.apiKey = options.authKey;
    }
    // @ts-expect-error
    if (options.apiKey) {
        // @ts-expect-error
        options.auth.apiKey = options.apiKey;
    }
    options.auth = options.auth || {};
    if ('privateKey' in options.auth) {
        const { privateKey } = options.auth;
        if (typeof privateKey === 'string' && !privateKey.startsWith('0x')) {
            options.auth.privateKey = `0x${options.auth.privateKey}`;
        }
    }
    return options;
}
exports.default = ClientConfig;
const validateConfig = (data) => {
    const ajv = new ajv_1.default();
    (0, ajv_formats_1.default)(ajv);
    ajv.addFormat('ethereum-address', /^0x[a-zA-Z0-9]{40}$/);
    ajv.addFormat('ethereum-private-key', /^(0x)?[a-zA-Z0-9]{64}$/);
    if (!ajv.validate(config_schema_json_1.default, data)) {
        throw new Error(ajv.errors.map((e) => {
            let text = ajv.errorsText([e], { dataVar: '' }).trim();
            if (e.params.additionalProperty) {
                text += `: ${e.params.additionalProperty}`;
            }
            return text;
        }).join('\n'));
    }
};
exports.validateConfig = validateConfig;
//# sourceMappingURL=ConfigBase.js.map