"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamEndpoints = void 0;
/**
 * Public Stream meta APIs.
 */
const http_1 = require("http");
const https_1 = require("https");
const tsyringe_1 = require("tsyringe");
const streamr_client_protocol_1 = require("streamr-client-protocol");
const utils_1 = require("./utils");
const Context_1 = require("./utils/Context");
const authFetch_1 = require("./authFetch");
const Container_1 = require("./Container");
const Config_1 = require("./Config");
const Rest_1 = require("./Rest");
const Ethereum_1 = __importDefault(require("./Ethereum"));
const StreamRegistry_1 = require("./StreamRegistry");
const StorageNodeRegistry_1 = require("./StorageNodeRegistry");
const StreamIDBuilder_1 = require("./StreamIDBuilder");
const agentSettings = {
    keepAlive: true,
    keepAliveMsecs: 5000,
};
const agentByProtocol = {
    http: new http_1.Agent(agentSettings),
    https: new https_1.Agent(agentSettings),
};
function getKeepAliveAgentForUrl(url) {
    if (url.startsWith('https')) {
        return agentByProtocol.https;
    }
    if (url.startsWith('http')) {
        return agentByProtocol.http;
    }
    throw new Error(`Unknown protocol in URL: ${url}`);
}
/** TODO the class should be annotated with at-internal, but adding the annotation hides the methods */
let StreamEndpoints = class StreamEndpoints {
    constructor(context, container, options, rest, storageNodeRegistry, streamRegistry, streamIdBuilder, ethereum) {
        this.container = container;
        this.options = options;
        this.rest = rest;
        this.storageNodeRegistry = storageNodeRegistry;
        this.streamRegistry = streamRegistry;
        this.streamIdBuilder = streamIdBuilder;
        this.ethereum = ethereum;
        this.id = (0, utils_1.instanceId)(this);
        this.debug = context.debug.extend(this.id);
    }
    /**
     * @category Important
     */
    async getOrCreateStream(props) {
        this.debug('getOrCreateStream %o', {
            props,
        });
        try {
            return await this.streamRegistry.getStream(props.id);
        }
        catch (err) {
            // If stream does not exist, attempt to create it
            if (err.errorCode === authFetch_1.ErrorCode.NOT_FOUND) {
                const stream = await this.streamRegistry.createStream(props);
                this.debug('created stream: %s %o', props.id, stream.toObject());
                return stream;
            }
            throw err;
        }
    }
    async getStreamLast(streamDefinition, count = 1) {
        const streamPartId = await this.streamIdBuilder.toStreamPartID(streamDefinition);
        const [streamId, streamPartition] = streamr_client_protocol_1.StreamPartIDUtils.getStreamIDAndPartition(streamPartId);
        this.debug('getStreamLast %o', {
            streamPartId,
            count,
        });
        const stream = await this.streamRegistry.getStream(streamId);
        const nodeAddresses = await stream.getStorageNodes();
        if (nodeAddresses.length === 0) {
            throw new authFetch_1.NotFoundError('Stream: id=' + streamId + ' has no storage nodes!');
        }
        const chosenNode = nodeAddresses[Math.floor(Math.random() * nodeAddresses.length)];
        const nodeUrl = await this.storageNodeRegistry.getStorageNodeUrl(chosenNode);
        const normalizedStreamId = await this.streamIdBuilder.toStreamID(streamId);
        const json = await this.rest.get([
            'streams', normalizedStreamId, 'data', 'partitions', streamPartition, 'last',
        ], {
            query: { count },
            useSession: false,
            restUrl: nodeUrl
        });
        return json;
    }
    async getStreamPartsByStorageNode(nodeAddress) {
        const { streams } = await this.storageNodeRegistry.getStoredStreamsOf(nodeAddress);
        const result = [];
        streams.forEach((stream) => {
            for (let i = 0; i < stream.partitions; i++) {
                result.push((0, streamr_client_protocol_1.toStreamPartID)(stream.id, i));
            }
        });
        return result;
    }
    async publishHttp(nodeUrl, streamIdOrPath, data, requestOptions = {}, keepAlive = true) {
        const streamId = await this.streamIdBuilder.toStreamID(streamIdOrPath);
        this.debug('publishHttp %o', {
            streamId, data,
        });
        await this.rest.post(['streams', streamId, 'data'], data, {
            ...requestOptions,
            agent: keepAlive ? getKeepAliveAgentForUrl(nodeUrl) : undefined,
            restUrl: nodeUrl
        });
    }
};
StreamEndpoints = __decorate([
    (0, tsyringe_1.scoped)(tsyringe_1.Lifecycle.ContainerScoped),
    __param(1, (0, tsyringe_1.inject)(Container_1.BrubeckContainer)),
    __param(2, (0, tsyringe_1.inject)(Config_1.Config.Connection)),
    __param(3, (0, tsyringe_1.inject)((0, tsyringe_1.delay)(() => Rest_1.Rest))),
    __param(4, (0, tsyringe_1.inject)((0, tsyringe_1.delay)(() => StorageNodeRegistry_1.StorageNodeRegistry))),
    __param(5, (0, tsyringe_1.inject)(StreamRegistry_1.StreamRegistry)),
    __param(6, (0, tsyringe_1.inject)(StreamIDBuilder_1.StreamIDBuilder)),
    __metadata("design:paramtypes", [Context_1.Context, Object, Object, Rest_1.Rest,
        StorageNodeRegistry_1.StorageNodeRegistry,
        StreamRegistry_1.StreamRegistry,
        StreamIDBuilder_1.StreamIDBuilder,
        Ethereum_1.default])
], StreamEndpoints);
exports.StreamEndpoints = StreamEndpoints;
//# sourceMappingURL=StreamEndpoints.js.map