import { StreamMessage, GroupKeyResponse, GroupKeyErrorResponse, ValidationError, StreamID } from 'streamr-client-protocol';
import { Context } from '../utils/Context';
import Publisher from '../publish/Publisher';
import GroupKeyStoreFactory from './GroupKeyStoreFactory';
import { GroupKey } from './Encryption';
import { KeyExchangeStream } from './KeyExchangeUtils';
import { StreamEndpointsCached } from '../StreamEndpointsCached';
export declare class PublisherKeyExchange implements Context {
    private publisher;
    private groupKeyStoreFactory;
    private streamEndpoints;
    private keyExchangeStream;
    enabled: boolean;
    id: string;
    debug: import("debug").Debugger;
    getSubscription: (() => Promise<import("..").Subscription<unknown> | undefined>) & {
        reset(): void;
        isStarted(): boolean;
    };
    constructor(publisher: Publisher, groupKeyStoreFactory: GroupKeyStoreFactory, streamEndpoints: StreamEndpointsCached, keyExchangeStream: KeyExchangeStream);
    getWrapError(streamMessage: StreamMessage): (error: ValidationError) => Promise<StreamMessage<GroupKeyResponse | GroupKeyErrorResponse> | undefined>;
    private onKeyExchangeMessage;
    private subscribe;
    getGroupKeyStore(streamId: StreamID): Promise<import("./GroupKeyStore").default>;
    rotateGroupKey(streamId: StreamID): Promise<void>;
    setNextGroupKey(streamId: StreamID, groupKey: GroupKey): Promise<void>;
    useGroupKey(streamId: StreamID): Promise<never[] | [GroupKey | undefined, GroupKey | undefined]>;
    hasAnyGroupKey(streamId: StreamID): Promise<boolean>;
    rekey(streamId: StreamID): Promise<void>;
    start(): Promise<void>;
    stop(): Promise<void>;
}
