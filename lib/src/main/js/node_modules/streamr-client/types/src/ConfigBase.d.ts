/**
 * @module StreamrClientConfig
 *
 * Old Client Config
 * New Brubeck Configuration in Config.ts.
 * TODO: Disolve ConfigBase.
 */
import type { BigNumber } from '@ethersproject/bignumber';
import type { AuthConfig, EthereumConfig } from './Ethereum';
import type { EncryptionConfig } from './encryption/KeyExchangeUtils';
import { EthereumAddress } from 'streamr-client-protocol';
export declare type CacheConfig = {
    maxSize: number;
    maxAge: number;
};
export declare type SubscribeConfig = {
    /** Attempt to order messages */
    orderMessages: boolean;
    gapFill: boolean;
    maxGapRequests: number;
    maxRetries: number;
    verifySignatures: 'auto' | 'always' | 'never';
    retryResendAfter: number;
    gapFillTimeout: number;
};
export declare type ConnectionConfig = {
    /** Core HTTP API calls go here */
    restUrl: string;
    /** Some TheGraph instance, that indexes the streamr registries */
    theGraphUrl: string;
    /** Automatically connect on first subscribe */
    autoConnect: boolean;
    /**  Automatically disconnect on last unsubscribe */
    autoDisconnect: boolean;
};
export declare type DataUnionConfig = {
    /**
     * Threshold value set in AMB configs, smallest token amount to pass over the bridge if
     * someone else pays for the gas when transporting the withdraw tx to mainnet;
     * otherwise the client does the transport as self-service and pays the mainnet gas costs
     */
    minimumWithdrawTokenWei: BigNumber | number | string;
    payForTransport: boolean;
    factoryMainnetAddress: EthereumAddress;
    factorySidechainAddress: EthereumAddress;
    templateMainnetAddress: EthereumAddress;
    templateSidechainAddress: EthereumAddress;
};
/**
 * @category Important
 */
export declare type StrictStreamrClientConfig = {
    /** Custom human-readable debug id for client. Used in logging. Unique id will be generated regardless. */
    id?: string;
    /**
    * Authentication: identity used by this StreamrClient instance.
    * Can contain member privateKey or (window.)ethereum
    */
    auth: AuthConfig;
    /** joinPartAgent when using EE for join part handling */
    streamrNodeAddress: EthereumAddress;
    streamRegistryChainAddress: EthereumAddress;
    streamStorageRegistryChainAddress: EthereumAddress;
    storageNodeRegistryChainAddress: EthereumAddress;
    ensCacheChainAddress: EthereumAddress;
    dataUnion: DataUnionConfig;
    cache: CacheConfig;
} & (EthereumConfig & ConnectionConfig & SubscribeConfig & EncryptionConfig);
export declare type StreamrClientConfig = Partial<Omit<StrictStreamrClientConfig, 'dataUnion'> & {
    dataUnion: Partial<StrictStreamrClientConfig['dataUnion']>;
}>;
export declare const STREAMR_STORAGE_NODE_GERMANY = "0x31546eEA76F2B2b3C5cC06B1c93601dc35c9D916";
/**
 * @category Important
 */
export declare const STREAM_CLIENT_DEFAULTS: StrictStreamrClientConfig;
export declare const validateConfig: (data: unknown) => void | never;
