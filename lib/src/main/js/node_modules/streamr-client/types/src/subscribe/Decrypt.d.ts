/**
 * Decrypt StreamMessages in-place.
 */
import { StreamMessage } from 'streamr-client-protocol';
import { SubscriberKeyExchange } from '../encryption/KeyExchangeSubscriber';
import { StreamEndpointsCached } from '../StreamEndpointsCached';
import { Context } from '../utils/Context';
import { DestroySignal } from '../DestroySignal';
import { Stoppable } from '../utils/Stoppable';
declare type IDecrypt<T> = {
    decrypt: (streamMessage: StreamMessage<T>) => Promise<void>;
};
export declare class Decrypt<T> implements IDecrypt<T>, Context, Stoppable {
    private streamEndpoints;
    private keyExchange;
    private destroySignal;
    id: string;
    debug: import("debug").Debugger;
    isStopped: boolean;
    constructor(context: Context, streamEndpoints: StreamEndpointsCached, keyExchange: SubscriberKeyExchange, destroySignal: DestroySignal);
    decrypt(streamMessage: StreamMessage<T>): Promise<void>;
    stop(): Promise<void>;
}
export {};
