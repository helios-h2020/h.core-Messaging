import { Context } from '../utils/Context';
import { PersistentStore } from './PersistentStore';
import { StreamID } from 'streamr-client-protocol';
export declare type ServerPersistentStoreOptions = {
    context: Context;
    clientId: string;
    streamId: StreamID;
    initialData?: Record<string, string>;
    rootPath?: string;
    migrationsPath?: string;
};
export default class ServerPersistentStore implements PersistentStore<string, string>, Context {
    readonly id: string;
    readonly clientId: string;
    readonly streamId: string;
    readonly dbFilePath: string;
    private store?;
    private error?;
    private readonly initialData;
    private initCalled;
    readonly migrationsPath: string;
    readonly debug: import("debug").Debugger;
    constructor({ context, clientId, streamId, initialData, rootPath, migrationsPath }: ServerPersistentStoreOptions);
    exists(): Promise<boolean>;
    private tryExec;
    init(): Promise<void>;
    get(key: string): Promise<any>;
    has(key: string): Promise<boolean>;
    private setKeyValue;
    set(key: string, value: string): Promise<boolean>;
    delete(key: string): Promise<boolean>;
    clear(): Promise<boolean>;
    size(): Promise<any>;
    close(): Promise<void>;
    destroy(): Promise<void>;
    get [Symbol.toStringTag](): string;
}
