import { Context } from '../utils/Context';
import { GroupKey } from './Encryption';
import { PersistentStore } from './PersistentStore';
import { ServerPersistentStoreOptions } from './ServerPersistentStore';
import { StreamID } from 'streamr-client-protocol';
declare type GroupKeyId = string;
declare type GroupKeyStoreOptions = {
    context: Context;
    clientId: string;
    streamId: StreamID;
    groupKeys: [GroupKeyId, GroupKey][];
};
export declare class GroupKeyPersistence implements PersistentStore<string, GroupKey> {
    store: PersistentStore<string, string>;
    constructor(options: ServerPersistentStoreOptions);
    has(groupKeyId: string): Promise<boolean>;
    size(): Promise<number>;
    get(groupKeyId: string): Promise<GroupKey | undefined>;
    add(groupKey: GroupKey): Promise<boolean>;
    set(groupKeyId: string, value: GroupKey): Promise<boolean>;
    delete(groupKeyId: string): Promise<boolean>;
    clear(): Promise<boolean>;
    destroy(): Promise<void>;
    close(): Promise<void>;
    exists(): Promise<boolean>;
    get [Symbol.toStringTag](): string;
}
export default class GroupKeyStore implements Context {
    id: string;
    debug: import("debug").Debugger;
    store: GroupKeyPersistence;
    currentGroupKeyId: GroupKeyId | undefined;
    nextGroupKeys: GroupKey[];
    constructor({ context, clientId, streamId, groupKeys }: GroupKeyStoreOptions);
    private storeKey;
    has(id: GroupKeyId): Promise<boolean>;
    isEmpty(): Promise<boolean>;
    useGroupKey(): Promise<[GroupKey | undefined, GroupKey | undefined]>;
    get(id: GroupKeyId): Promise<GroupKey | undefined>;
    exists(): Promise<boolean>;
    clear(): Promise<boolean>;
    rotateGroupKey(): Promise<void>;
    add(groupKey: GroupKey): Promise<GroupKey>;
    setNextGroupKey(newKey: GroupKey): Promise<void>;
    close(): Promise<void>;
    rekey(): Promise<void>;
}
export {};
