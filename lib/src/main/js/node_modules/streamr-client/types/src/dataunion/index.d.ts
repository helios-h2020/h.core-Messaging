import { BigNumber } from '@ethersproject/bignumber';
import { BytesLike } from '@ethersproject/bytes';
import { EthereumAddress } from 'streamr-client-protocol';
import Ethereum from '../Ethereum';
import { Rest } from '../Rest';
import { StrictBrubeckClientConfig } from '../Config';
import { DataUnion, DataUnionDeployOptions } from './DataUnion';
export default class DataUnionAPI {
    ethereum: Ethereum;
    rest: Rest;
    options: StrictBrubeckClientConfig;
    constructor(ethereum: Ethereum, rest: Rest, options: StrictBrubeckClientConfig);
    /**
     * Get token balance in "wei" (10^-18 parts) for given address
     */
    getTokenBalance(address: EthereumAddress): Promise<BigNumber>;
    /**
     * Get token balance in "wei" (10^-18 parts) for given address in sidechain
     */
    getSidechainTokenBalance(address: EthereumAddress): Promise<BigNumber>;
    /**
     * NOTE: if template address is not given, calculation only works for the newest currently deployed factory,
     *       i.e. can be used for "future deployments" but NOT for old deployments
     * For old deployments, please use getDataUnion
     */
    calculateDataUnionAddresses(dataUnionName: string, deployerAddress?: EthereumAddress): Promise<{
        mainnetAddress: EthereumAddress;
        sidechainAddress: EthereumAddress;
    }>;
    getDataUnion(contractAddress: EthereumAddress): Promise<DataUnion>;
    /**
     * Create a new DataUnionMainnet contract to mainnet with DataUnionFactoryMainnet
     * This triggers DataUnionSidechain contract creation in sidechain, over the bridge (AMB)
     * @return Promise<DataUnion> that resolves when the new DU is deployed over the bridge to side-chain
     */
    deployDataUnion(options?: DataUnionDeployOptions): Promise<DataUnion>;
    setBinanceDepositAddress(binanceRecipient: EthereumAddress): Promise<import("@ethersproject/abstract-provider").TransactionReceipt>;
    setBinanceDepositAddressFromSignature(from: EthereumAddress, binanceRecipient: EthereumAddress, signature: BytesLike): Promise<import("@ethersproject/abstract-provider").TransactionReceipt>;
    setBinanceDepositAddressViaWithdrawServer(from: EthereumAddress, binanceRecipient: EthereumAddress, signature: BytesLike): Promise<object>;
    getBinanceDepositAddress(userAddress: EthereumAddress): Promise<any>;
    signSetBinanceRecipient(recipientAddress: EthereumAddress): Promise<string>;
}
