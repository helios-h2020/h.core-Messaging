import 'reflect-metadata';
import './utils/PatchTsyringe';
import { DependencyContainer } from 'tsyringe';
import Ethereum from './Ethereum';
import { Context } from './utils/Context';
import { StrictBrubeckClientConfig, BrubeckClientConfig } from './Config';
import Publisher from './publish/Publisher';
import Subscriber from './subscribe/Subscriber';
import Resends, { ResendOptions } from './subscribe/Resends';
import { ResendSubscription } from './subscribe/ResendSubscription';
import BrubeckNode from './BrubeckNode';
import Session from './Session';
import { DestroySignal } from './DestroySignal';
import { StreamEndpoints } from './StreamEndpoints';
import { StreamEndpointsCached } from './StreamEndpointsCached';
import { LoginEndpoints } from './LoginEndpoints';
import DataUnions from './dataunion';
import GroupKeyStoreFactory from './encryption/GroupKeyStoreFactory';
import { StorageNodeRegistry } from './StorageNodeRegistry';
import { StreamRegistry } from './StreamRegistry';
import { Methods } from './utils/Plugin';
import { StreamDefinition } from './types';
import { Subscription, SubscriptionOnMessage } from './subscribe/Subscription';
import { StreamIDBuilder } from './StreamIDBuilder';
export interface StreamrClient extends Ethereum, Methods<StreamEndpoints>, Methods<Omit<Subscriber, 'subscribe'>>, Methods<StreamRegistry>, Methods<Omit<BrubeckNode, 'destroy' | 'connect'>>, Methods<LoginEndpoints>, Methods<Publisher>, Methods<StorageNodeRegistry>, Methods<DataUnions>, Methods<GroupKeyStoreFactory>, Methods<Session>, Methods<Resends> {
}
declare class StreamrClientBase implements Context {
    container: DependencyContainer;
    context: Context;
    options: StrictBrubeckClientConfig;
    node: BrubeckNode;
    ethereum: Ethereum;
    session: Session;
    loginEndpoints: LoginEndpoints;
    streamEndpoints: StreamEndpoints;
    cached: StreamEndpointsCached;
    resends: Resends;
    publisher: Publisher;
    subscriber: Subscriber;
    groupKeyStore: GroupKeyStoreFactory;
    protected destroySignal: DestroySignal;
    dataunions: DataUnions;
    streamRegistry: StreamRegistry;
    storageNodeRegistry: StorageNodeRegistry;
    private streamIdBuilder;
    static generateEthereumAccount: typeof Ethereum.generateEthereumAccount;
    id: string;
    debug: import("debug").Debugger;
    onDestroy: {
        (): Promise<undefined>;
        <ReturnType_1>(this: ReturnType_1, cb: () => unknown): ReturnType_1;
    } & Methods<import("./utils/Signal").default<[]>>;
    isDestroyed: () => boolean;
    constructor(container: DependencyContainer, context: Context, options: StrictBrubeckClientConfig, node: BrubeckNode, ethereum: Ethereum, session: Session, loginEndpoints: LoginEndpoints, streamEndpoints: StreamEndpoints, cached: StreamEndpointsCached, resends: Resends, publisher: Publisher, subscriber: Subscriber, groupKeyStore: GroupKeyStoreFactory, destroySignal: DestroySignal, dataunions: DataUnions, streamRegistry: StreamRegistry, storageNodeRegistry: StorageNodeRegistry, streamIdBuilder: StreamIDBuilder);
    subscribe<T>(options: StreamDefinition & {
        resend: ResendOptions;
    }, onMessage?: SubscriptionOnMessage<T>): Promise<ResendSubscription<T>>;
    subscribe<T>(options: StreamDefinition, onMessage?: SubscriptionOnMessage<T>): Promise<Subscription<T>>;
    private resendSubscribe;
    connect: (() => Promise<void>) & {
        reset(): void;
        isStarted(): boolean;
    };
    /** @deprecated */
    disconnect(): Promise<void>;
    destroy: (() => Promise<void>) & {
        reset(): void;
        isStarted(): boolean;
    };
    enableDebugLogging(prefix?: string): void;
    disableDebugLogging(): void;
}
export declare class StreamrClient extends StreamrClientBase {
    constructor(options?: BrubeckClientConfig, parentContainer?: DependencyContainer);
}
export declare const Dependencies: {
    Context: typeof Context;
    BrubeckNode: typeof BrubeckNode;
    StorageNodeRegistry: typeof StorageNodeRegistry;
    Session: typeof Session;
    LoginEndpoints: typeof LoginEndpoints;
    StreamEndpoints: typeof StreamEndpoints;
    StreamEndpointsCached: typeof StreamEndpointsCached;
    Resends: typeof Resends;
    Publisher: typeof Publisher;
    Subscriber: typeof Subscriber;
    GroupKeyStoreFactory: typeof GroupKeyStoreFactory;
    DestroySignal: typeof DestroySignal;
    DataUnions: typeof DataUnions;
};
export { BrubeckClientConfig as StreamrClientOptions } from './Config';
