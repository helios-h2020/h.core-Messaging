/**
 * Cached Subset of StreamEndpoints.
 */
import { StreamID } from 'streamr-client-protocol';
import { Context } from './utils/Context';
import { CacheConfig } from './Config';
import { StreamRegistry } from './StreamRegistry';
export declare class StreamEndpointsCached implements Context {
    private streamRegistry;
    private cacheOptions;
    id: string;
    debug: import("debug").Debugger;
    constructor(context: Context, streamRegistry: StreamRegistry, cacheOptions: CacheConfig);
    getStreamPreloaded(streamId: StreamID): Promise<import("./Stream").Stream>;
    getStream: ((streamId: StreamID) => Promise<import("./Stream").Stream>) & {
        clear: () => void;
        clearMatching: (matchFn: (key: string) => boolean) => void;
    };
    getStreamValidationInfoPreloaded(streamId: StreamID): Promise<import("./Stream").Stream>;
    getStreamValidationInfo: ((streamId: StreamID) => Promise<import("./Stream").Stream>) & {
        clear: () => void;
        clearMatching: (matchFn: (key: string) => boolean) => void;
    };
    isStreamPublisherPreloaded(streamId: StreamID, ethAddress: string): Promise<boolean>;
    isStreamPublisher: ((...args: any) => Promise<boolean>) & {
        clear: () => void;
        clearMatching: (matchFn: (key: string) => boolean) => void;
    };
    isStreamSubscriberPreloaded(streamId: StreamID, ethAddress: string): Promise<boolean>;
    isStreamSubscriber: ((...args: any) => Promise<boolean>) & {
        clear: () => void;
        clearMatching: (matchFn: (key: string) => boolean) => void;
    };
    isPublicSubscriptionStream(streamId: StreamID): Promise<boolean>;
    isPublic: ((streamId: StreamID) => Promise<boolean>) & {
        clear: () => void;
        clearMatching: (matchFn: (key: any) => boolean) => void;
    };
    /**
     * Clear cache for streamId
     */
    clearStream(streamId: StreamID): void;
    /**
     * Clear all cached data
     */
    clear(): void;
}
