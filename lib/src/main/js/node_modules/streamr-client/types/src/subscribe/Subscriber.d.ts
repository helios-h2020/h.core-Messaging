import { DependencyContainer } from 'tsyringe';
import { Context } from '../utils/Context';
import SubscriptionSession from './SubscriptionSession';
import { Subscription, SubscriptionOnMessage } from './Subscription';
import { StreamPartID } from 'streamr-client-protocol';
import { StreamIDBuilder } from '../StreamIDBuilder';
import { StreamDefinition } from '../types';
/**
 * Public Subscribe APIs
 */
export default class Subscriber implements Context {
    private streamIdBuilder;
    private container;
    id: string;
    debug: import("debug").Debugger;
    readonly subSessions: Map<StreamPartID, SubscriptionSession<unknown>>;
    constructor(context: Context, streamIdBuilder: StreamIDBuilder, container: DependencyContainer);
    subscribe<T>(streamDefinition: StreamDefinition, onMessage?: SubscriptionOnMessage<T>): Promise<Subscription<T>>;
    subscribeTo<T>(streamPartId: StreamPartID, onMessage?: SubscriptionOnMessage<T>): Promise<Subscription<T>>;
    private add;
    private remove;
    unsubscribe(streamDefinitionOrSubscription?: StreamDefinition | Subscription): Promise<unknown>;
    unsubscribeAll: (streamDefinition?: StreamDefinition | undefined) => Promise<unknown>;
    /**
     * Remove all subscriptions, optionally only those matching options.
     */
    private removeAll;
    /**
     * Count all subscriptions.
     */
    private countAll;
    /**
     * Count all matching subscriptions.
     */
    count(streamDefinition?: StreamDefinition): Promise<number>;
    /**
     * Get all subscriptions.
     */
    private getAllSubscriptions;
    countSubscriptionSessions(): number;
    /**
     * Get subscriptions matching streamId or streamId + streamPartition
     */
    getSubscriptions(streamDefinition?: StreamDefinition): Promise<Subscription<unknown>[]>;
    stop(): Promise<void>;
}
