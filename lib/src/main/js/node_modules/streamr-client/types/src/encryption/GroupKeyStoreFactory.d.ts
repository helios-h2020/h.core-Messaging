import { Context } from '../utils/Context';
import { CacheConfig } from '../Config';
import Ethereum from '../Ethereum';
import { EncryptionConfig } from './KeyExchangeUtils';
import GroupKeyStore from './GroupKeyStore';
import { GroupKey } from './Encryption';
import { StreamID } from 'streamr-client-protocol';
export default class GroupKeyStoreFactory implements Context {
    private ethereum;
    id: string;
    debug: import("debug").Debugger;
    private cleanupFns;
    initialGroupKeys: Record<string, import("./KeyExchangeUtils").GroupKeysSerialized>;
    getStore: ((streamId: StreamID) => Promise<GroupKeyStore>) & {
        clear(): void;
    };
    constructor(context: Context, ethereum: Ethereum, cacheConfig: CacheConfig, encryptionConfig: EncryptionConfig);
    private getNewStore;
    useGroupKey(streamId: StreamID): Promise<[GroupKey | undefined, GroupKey | undefined]>;
    rotateGroupKey(streamId: StreamID): Promise<void>;
    setNextGroupKey(streamId: StreamID, newKey: GroupKey): Promise<void>;
    rekey(streamId: StreamID): Promise<void>;
    stop(): Promise<void>;
}
