import { DependencyContainer } from 'tsyringe';
import Ethereum from './Ethereum';
import { Context } from './utils/Context';
import { StrictStreamrClientConfig } from './Config';
import { Stream, StreamProperties } from './Stream';
import { EthereumAddress } from 'streamr-client-protocol';
import { StreamIDBuilder } from './StreamIDBuilder';
import { GraphQLClient } from './utils/GraphQLClient';
import { SearchStreamsPermissionFilter } from './searchStreams';
import { PermissionAssignment, PermissionQuery } from './permission';
import { StreamEndpointsCached } from './StreamEndpointsCached';
export declare class StreamRegistry implements Context {
    private ethereum;
    private streamIdBuilder;
    private container;
    private config;
    private graphQLClient;
    private streamEndpointsCached;
    id: string;
    debug: import("debug").Debugger;
    private streamRegistryContract?;
    private streamRegistryContractsReadonly;
    private chainProviders;
    private chainSigner?;
    constructor(context: Context, ethereum: Ethereum, streamIdBuilder: StreamIDBuilder, container: DependencyContainer, config: StrictStreamrClientConfig, graphQLClient: GraphQLClient, streamEndpointsCached: StreamEndpointsCached);
    private parseStream;
    getStreamFromContract(streamIdOrPath: string): Promise<Stream>;
    private connectToStreamRegistryContract;
    createStream(propsOrStreamIdOrPath: StreamProperties | string): Promise<Stream>;
    private ensureStreamIdInNamespaceOfAuthenticatedUser;
    updateStream(props: StreamProperties): Promise<Stream>;
    deleteStream(streamIdOrPath: string): Promise<void>;
    streamExistsOnChain(streamIdOrPath: string): Promise<boolean>;
    streamExistsOnTheGraph(streamIdOrPath: string): Promise<boolean>;
    getStream(streamIdOrPath: string): Promise<Stream>;
    getStreamFromGraph(streamIdOrPath: string): Promise<Stream>;
    searchStreams(term: string | undefined, permissionFilter: SearchStreamsPermissionFilter | undefined): AsyncGenerator<Stream>;
    getStreamPublishers(streamIdOrPath: string): AsyncGenerator<EthereumAddress>;
    getStreamSubscribers(streamIdOrPath: string): AsyncGenerator<EthereumAddress>;
    private getStreamPublishersOrSubscribersList;
    private static buildStreamPublishersOrSubscribersQuery;
    static formMetadata(props: StreamProperties): string;
    hasPermission(query: PermissionQuery): Promise<boolean>;
    getPermissions(streamIdOrPath: string): Promise<PermissionAssignment[]>;
    grantPermissions(streamIdOrPath: string, ...assignments: PermissionAssignment[]): Promise<void>;
    revokePermissions(streamIdOrPath: string, ...assignments: PermissionAssignment[]): Promise<void>;
    private updatePermissions;
    setPermissions(streamIdOrPath: string, ...assignments: PermissionAssignment[]): Promise<void>;
    isStreamPublisher(streamIdOrPath: string, userAddress: EthereumAddress): Promise<boolean>;
    isStreamSubscriber(streamIdOrPath: string, userAddress: EthereumAddress): Promise<boolean>;
    private queryAllReadonlyContracts;
}
