import { StreamMessage, StreamID } from 'streamr-client-protocol';
import { Context } from '../utils/Context';
import Subscriber from '../subscribe/Subscriber';
import { GroupKeyId, KeyExchangeStream } from './KeyExchangeUtils';
import EncryptionUtil, { GroupKey } from './Encryption';
import GroupKeyStoreFactory from './GroupKeyStoreFactory';
export declare class SubscriberKeyExchange implements Context {
    private subscriber;
    private keyExchangeStream;
    private groupKeyStoreFactory;
    id: string;
    debug: import("debug").Debugger;
    encryptionUtil: EncryptionUtil;
    isStopped: boolean;
    constructor(subscriber: Subscriber, keyExchangeStream: KeyExchangeStream, groupKeyStoreFactory: GroupKeyStoreFactory);
    requestKeys({ streamId, publisherId, groupKeyIds }: {
        streamId: StreamID;
        publisherId: string;
        groupKeyIds: GroupKeyId[];
    }): Promise<GroupKey[]>;
    stop(): void;
    getGroupKeyStore(streamId: StreamID): Promise<import("./GroupKeyStore").default>;
    getKey(streamMessage: StreamMessage): Promise<GroupKey | undefined>;
    getGroupKey(streamMessage: StreamMessage): Promise<GroupKey | undefined>;
    addNewKey(streamMessage: StreamMessage): Promise<void>;
}
