import { DependencyContainer } from 'tsyringe';
import { StrictStreamrClientConfig } from './Config';
import { Stream } from './Stream';
import Ethereum from './Ethereum';
import { EthereumAddress } from 'streamr-client-protocol';
import { StreamIDBuilder } from './StreamIDBuilder';
import { HttpFetcher } from './utils/HttpFetcher';
export declare type StorageNodeAssignmentEvent = {
    streamId: string;
    nodeAddress: EthereumAddress;
    type: 'added' | 'removed';
    blockNumber: number;
};
export declare class StorageNodeRegistry {
    private container;
    private ethereum;
    private streamIdBuilder;
    private httpFetcher;
    private clientConfig;
    private chainProvider;
    private streamStorageRegistryContractReadonly;
    private chainSigner?;
    private nodeRegistryContract?;
    private streamStorageRegistryContract?;
    constructor(container: DependencyContainer, ethereum: Ethereum, streamIdBuilder: StreamIDBuilder, httpFetcher: HttpFetcher, clientConfig: StrictStreamrClientConfig);
    isStreamStoredInStorageNodeFromContract(streamIdOrPath: string, nodeAddress: string): Promise<boolean>;
    private connectToNodeRegistryContract;
    createOrUpdateNodeInStorageNodeRegistry(nodeMetadata: string): Promise<void>;
    removeNodeFromStorageNodeRegistry(): Promise<void>;
    addStreamToStorageNode(streamIdOrPath: string, nodeAddress: string): Promise<void>;
    removeStreamFromStorageNode(streamIdOrPath: string, nodeAddress: string): Promise<void>;
    getStorageNodeUrl(nodeAddress: string): Promise<string>;
    isStreamStoredInStorageNode(streamIdOrPath: string, nodeAddress: string): Promise<boolean>;
    getStorageNodesOf(streamIdOrPath: string): Promise<EthereumAddress[]>;
    getStoredStreamsOf(nodeAddress: string): Promise<{
        streams: Stream[];
        blockNumber: number;
    }>;
    getAllStorageNodes(): Promise<EthereumAddress[]>;
    private sendNodeQuery;
    registerStorageEventListener(callback: (event: StorageNodeAssignmentEvent) => any): Promise<void>;
    unRegisterStorageEventListeners(): Promise<void>;
    private static buildAllNodesQuery;
    private static buildGetNodeQuery;
    private static buildStoredStreamQuery;
    private static buildStorageNodeQuery;
    stop(): Promise<void>;
}
