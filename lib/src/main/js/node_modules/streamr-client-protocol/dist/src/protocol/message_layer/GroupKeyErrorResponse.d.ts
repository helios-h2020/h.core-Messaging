import StreamMessage from './StreamMessage';
import GroupKeyMessage from './GroupKeyMessage';
import { StreamID } from '../../../src/utils/StreamID';
export declare type ErrorCode = string;
export interface Options {
    requestId: string;
    streamId: StreamID;
    errorCode: ErrorCode;
    errorMessage: string;
    groupKeyIds: string[];
}
declare type GroupKeyErrorResponseSerialized = [string, string, ErrorCode, string, string[]];
export default class GroupKeyErrorResponse extends GroupKeyMessage {
    requestId: string;
    errorCode: ErrorCode;
    errorMessage: string;
    groupKeyIds: string[];
    constructor({ requestId, streamId, errorCode, errorMessage, groupKeyIds }: Options);
    toArray(): GroupKeyErrorResponseSerialized;
    static fromArray(arr: GroupKeyErrorResponseSerialized): GroupKeyErrorResponse;
    static is(streamMessage: StreamMessage): streamMessage is StreamMessage<GroupKeyErrorResponseSerialized>;
}
export {};
