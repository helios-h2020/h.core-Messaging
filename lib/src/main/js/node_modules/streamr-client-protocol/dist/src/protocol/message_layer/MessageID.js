"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const validations_1 = require("../../utils/validations");
const MessageRef_1 = __importDefault(require("./MessageRef"));
const StreamID_1 = require("../../../src/utils/StreamID");
const StreamPartID_1 = require("../../utils/StreamPartID");
class MessageID {
    constructor(streamId, streamPartition, timestamp, sequenceNumber, publisherId, msgChainId) {
        (0, validations_1.validateIsNotEmptyString)('streamId', streamId);
        (0, validations_1.validateIsNotNegativeInteger)('streamPartition', streamPartition);
        (0, validations_1.validateIsNotNegativeInteger)('timestamp', timestamp);
        (0, validations_1.validateIsNotNegativeInteger)('sequenceNumber', sequenceNumber);
        (0, validations_1.validateIsString)('publisherId', publisherId);
        (0, validations_1.validateIsString)('msgChainId', msgChainId);
        this.streamId = streamId;
        this.streamPartition = streamPartition;
        this.timestamp = timestamp;
        this.sequenceNumber = sequenceNumber;
        this.publisherId = publisherId;
        this.msgChainId = msgChainId;
    }
    toArray() {
        return [
            this.streamId,
            this.streamPartition,
            this.timestamp,
            this.sequenceNumber,
            this.publisherId,
            this.msgChainId,
        ];
    }
    static fromArray(arr) {
        const [streamId, streamPartition, timestamp, sequenceNumber, publisherId, msgChainId,] = arr;
        return new MessageID((0, StreamID_1.toStreamID)(streamId), streamPartition, timestamp, sequenceNumber, publisherId, msgChainId);
    }
    getStreamPartID() {
        return (0, StreamPartID_1.toStreamPartID)(this.streamId, this.streamPartition);
    }
    serialize() {
        return JSON.stringify(this.toArray());
    }
    toMessageRef() {
        return new MessageRef_1.default(this.timestamp, this.sequenceNumber);
    }
    clone() {
        return new MessageID(...this.toArray());
    }
}
exports.default = MessageID;
//# sourceMappingURL=MessageID.js.map