"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamPartIDUtils = exports.toStreamPartID = void 0;
const StreamID_1 = require("./StreamID");
const DELIMITER = '#';
const MAX_PARTITION_COUNT = 100;
function ensureValidStreamPartition(streamPartition) {
    if (!Number.isSafeInteger(streamPartition) || streamPartition < 0 || streamPartition >= MAX_PARTITION_COUNT) {
        throw new Error(`invalid streamPartition value: ${streamPartition}`);
    }
}
function toStreamPartID(streamId, streamPartition) {
    ensureValidStreamPartition(streamPartition);
    return `${streamId}${DELIMITER}${streamPartition}`;
}
exports.toStreamPartID = toStreamPartID;
class StreamPartIDUtils {
    static parse(streamPartIdAsStr) {
        const [streamId, streamPartition] = StreamPartIDUtils.parseRawElements(streamPartIdAsStr);
        if (streamPartition === undefined) {
            throw new Error(`invalid streamPartID string: ${streamPartIdAsStr}`);
        }
        (0, StreamID_1.toStreamID)(streamId); // throws if not valid
        ensureValidStreamPartition(streamPartition);
        return streamPartIdAsStr;
    }
    static getStreamID(streamPartId) {
        return this.getStreamIDAndPartition(streamPartId)[0];
    }
    static getStreamPartition(streamPartId) {
        return this.getStreamIDAndPartition(streamPartId)[1];
    }
    static getStreamIDAndPartition(streamPartId) {
        return StreamPartIDUtils.parseRawElements(streamPartId);
    }
    static parseRawElements(str) {
        const lastIdx = str.lastIndexOf(DELIMITER);
        if (lastIdx === -1 || lastIdx === str.length - 1) {
            return [str, undefined];
        }
        return [str.substring(0, lastIdx), Number(str.substring(lastIdx + 1))];
    }
}
exports.StreamPartIDUtils = StreamPartIDUtils;
//# sourceMappingURL=StreamPartID.js.map