"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamIDUtils = exports.toStreamID = void 0;
/**
 * Create an instance of `StreamID` from a given string stream id or path.
 *
 * Supported formats:
 *  - full stream id format, e.g., '0x0000000000000000000000000000000000000000/foo/bar' or 'name.eth/foo/bar'
 *  - path-only format, e.g. , '/foo/bar'
 *  - key-exchange format, e.g., SYSTEM/keyexchange/0x0000000000000000000000000000000000000000
 *  - legacy format, e.g., '7wa7APtlTq6EC5iTCBy6dw'
 *
 *  If `streamIdOrPath` is not in path-only format, `domain` can be left undefined.
 */
function toStreamID(streamIdOrPath, domain) {
    if (streamIdOrPath.length === 0) {
        throw new Error('stream id may not be empty');
    }
    const firstSlashIdx = streamIdOrPath.indexOf('/');
    if (firstSlashIdx === -1) { // legacy format
        return streamIdOrPath;
    }
    else if (StreamIDUtils.isKeyExchangeStream(streamIdOrPath)) { // key-exchange format
        return streamIdOrPath;
    }
    else if (firstSlashIdx === 0) { // path-only format
        if (domain === undefined) {
            throw new Error(`path-only format "${streamIdOrPath}" provided without domain`);
        }
        return (domain.toLowerCase() + streamIdOrPath);
    }
    else {
        const domain = streamIdOrPath.substring(0, firstSlashIdx).toLowerCase();
        const path = streamIdOrPath.substring(firstSlashIdx);
        return (domain + path);
    }
}
exports.toStreamID = toStreamID;
class StreamIDUtils {
    static formKeyExchangeStreamID(recipient) {
        return (StreamIDUtils.KEY_EXCHANGE_STREAM_PREFIX + recipient.toLowerCase());
    }
    static isPathOnlyFormat(streamIdOrPath) {
        return streamIdOrPath.startsWith('/');
    }
    static isKeyExchangeStream(streamId) {
        return streamId.startsWith(StreamIDUtils.KEY_EXCHANGE_STREAM_PREFIX);
    }
    static getDomain(streamId) {
        const domainAndPath = StreamIDUtils.getDomainAndPath(streamId);
        return domainAndPath === null || domainAndPath === void 0 ? void 0 : domainAndPath[0];
    }
    static isENSName(domain) {
        return domain.indexOf('.') !== -1;
    }
    static isENSAddress(address) {
        return address.indexOf('.') !== -1;
    }
    static getPath(streamId) {
        const domainAndPath = StreamIDUtils.getDomainAndPath(streamId);
        return domainAndPath === null || domainAndPath === void 0 ? void 0 : domainAndPath[1];
    }
    static getDomainAndPath(streamId) {
        const firstSlashIdx = streamId.indexOf('/');
        if (firstSlashIdx !== -1 && !StreamIDUtils.isKeyExchangeStream(streamId)) {
            return [streamId.substring(0, firstSlashIdx), streamId.substring(firstSlashIdx)];
        }
        else {
            return undefined;
        }
    }
    static getRecipient(streamId) {
        if (StreamIDUtils.isKeyExchangeStream(streamId)) {
            return streamId.substring(StreamIDUtils.KEY_EXCHANGE_STREAM_PREFIX.length);
        }
        return undefined;
    }
}
exports.StreamIDUtils = StreamIDUtils;
StreamIDUtils.KEY_EXCHANGE_STREAM_PREFIX = 'SYSTEM/keyexchange/';
//# sourceMappingURL=StreamID.js.map