import { EthereumAddress, ENSName } from './types';
export declare type StreamID = string & {
    readonly __brand: 'streamID';
};
/**
 * Create an instance of `StreamID` from a given string stream id or path.
 *
 * Supported formats:
 *  - full stream id format, e.g., '0x0000000000000000000000000000000000000000/foo/bar' or 'name.eth/foo/bar'
 *  - path-only format, e.g. , '/foo/bar'
 *  - key-exchange format, e.g., SYSTEM/keyexchange/0x0000000000000000000000000000000000000000
 *  - legacy format, e.g., '7wa7APtlTq6EC5iTCBy6dw'
 *
 *  If `streamIdOrPath` is not in path-only format, `domain` can be left undefined.
 */
export declare function toStreamID(streamIdOrPath: string, domain?: EthereumAddress | ENSName): StreamID | never;
export declare class StreamIDUtils {
    static readonly KEY_EXCHANGE_STREAM_PREFIX = "SYSTEM/keyexchange/";
    static formKeyExchangeStreamID(recipient: EthereumAddress): StreamID;
    static isPathOnlyFormat(streamIdOrPath: string): boolean;
    static isKeyExchangeStream(streamId: StreamID | string): boolean;
    static getDomain(streamId: StreamID): EthereumAddress | ENSName | undefined;
    static isENSName(domain: string): boolean;
    static isENSAddress(address: string): boolean;
    static getPath(streamId: StreamID): string | undefined;
    static getDomainAndPath(streamId: StreamID): [EthereumAddress | ENSName, string] | undefined;
    static getRecipient(streamId: StreamID): EthereumAddress | undefined;
}
